/* automatically generated by rust-bindgen 0.72.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const NULL: u32 = 0;
pub const LITTLE_ENDIAN: u32 = 3412;
pub const BIG_ENDIAN: u32 = 1234;
pub const BYTE_ORDER: u32 = 1234;
pub const ARGV_MAGIC: u32 = 1600221799;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48] = b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &[u8; 5] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &[u8; 5] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const jiffies: u32 = 0;
pub const EHCI_MAX_ROOT_PORTS: u32 = 8;
pub const EHCI_MAX_QTD: u32 = 8;
pub const USB_OK: u32 = 0;
pub const USB_FAILED: u32 = 1;
pub const USB_DT_DEVICE: u32 = 1;
pub const USB_DT_CONFIG: u32 = 2;
pub const USB_DT_STRING: u32 = 3;
pub const USB_DT_INTERFACE: u32 = 4;
pub const USB_DT_ENDPOINT: u32 = 5;
pub const USB_REQ_GETSTATUS: u32 = 0;
pub const USB_REQ_CLEARFEATURE: u32 = 1;
pub const USB_REQ_SETFEATURE: u32 = 3;
pub const USB_REQ_SETADDRESS: u32 = 5;
pub const USB_REQ_GETDESCRIPTOR: u32 = 6;
pub const USB_REQ_SETDESCRIPTOR: u32 = 7;
pub const USB_REQ_GETCONFIG: u32 = 8;
pub const USB_REQ_SETCONFIG: u32 = 9;
pub const USB_REQ_GETINTERFACE: u32 = 10;
pub const USB_REQ_SETINTERFACE: u32 = 11;
pub const USB_REQ_SYNCFRAME: u32 = 12;
pub const USB_DT_DEVICE_SIZE: u32 = 18;
pub const USB_DT_CONFIG_SIZE: u32 = 9;
pub const USB_DT_INTERFACE_SIZE: u32 = 9;
pub const USB_DT_ENDPOINT_SIZE: u32 = 7;
pub const USB_DT_ENDPOINT_AUDIO_SIZE: u32 = 9;
pub const USB_DT_HUB_NONVAR_SIZE: u32 = 7;
pub const USB_CTRLTYPE_DIR_HOST2DEVICE: u32 = 0;
pub const USB_CTRLTYPE_DIR_DEVICE2HOST: u32 = 128;
pub const USB_CTRLTYPE_TYPE_STANDARD: u32 = 0;
pub const USB_CTRLTYPE_TYPE_CLASS: u32 = 32;
pub const USB_CTRLTYPE_TYPE_VENDOR: u32 = 64;
pub const USB_CTRLTYPE_TYPE_RESERVED: u32 = 96;
pub const USB_CTRLTYPE_REC_DEVICE: u32 = 0;
pub const USB_CTRLTYPE_REC_INTERFACE: u32 = 1;
pub const USB_CTRLTYPE_REC_ENDPOINT: u32 = 2;
pub const USB_CTRLTYPE_REC_OTHER: u32 = 3;
pub const USB_FEATURE_ENDPOINT_HALT: u32 = 0;
pub const USB_ENDPOINT_IN: u32 = 128;
pub const USB_ENDPOINT_OUT: u32 = 0;
pub const DEFAULT_I_TDPS: u32 = 1024;
pub const CMD_PARK: u32 = 2048;
pub const CMD_LRESET: u32 = 128;
pub const CMD_IAAD: u32 = 64;
pub const CMD_ASE: u32 = 32;
pub const CMD_PSE: u32 = 16;
pub const CMD_RESET: u32 = 2;
pub const CMD_RUN: u32 = 1;
pub const STS_ASS: u32 = 32768;
pub const STS_PSS: u32 = 16384;
pub const STS_RECL: u32 = 8192;
pub const STS_HALT: u32 = 4096;
pub const STS_IAA: u32 = 32;
pub const STS_FATAL: u32 = 16;
pub const STS_FLR: u32 = 8;
pub const STS_PCD: u32 = 4;
pub const STS_ERR: u32 = 2;
pub const STS_INT: u32 = 1;
pub const FLAG_CF: u32 = 1;
pub const PORT_WKOC_E: u32 = 4194304;
pub const PORT_WKDISC_E: u32 = 2097152;
pub const PORT_WKCONN_E: u32 = 1048576;
pub const PORT_LED_OFF: u32 = 0;
pub const PORT_LED_AMBER: u32 = 16384;
pub const PORT_LED_GREEN: u32 = 32768;
pub const PORT_LED_MASK: u32 = 49152;
pub const PORT_OWNER: u32 = 8192;
pub const PORT_POWER: u32 = 4096;
pub const PORT_RESET: u32 = 256;
pub const PORT_SUSPEND: u32 = 128;
pub const PORT_RESUME: u32 = 64;
pub const PORT_OCC: u32 = 32;
pub const PORT_OC: u32 = 16;
pub const PORT_PEC: u32 = 8;
pub const PORT_PE: u32 = 4;
pub const PORT_CSC: u32 = 2;
pub const PORT_CONNECT: u32 = 1;
pub const PORT_RWC_BITS: u32 = 42;
pub const USBMODE: u32 = 104;
pub const USBMODE_SDIS: u32 = 8;
pub const USBMODE_BE: u32 = 4;
pub const USBMODE_CM_HC: u32 = 3;
pub const USBMODE_CM_IDLE: u32 = 0;
pub const DBGP_OWNER: u32 = 1073741824;
pub const DBGP_ENABLED: u32 = 268435456;
pub const DBGP_DONE: u32 = 65536;
pub const DBGP_INUSE: u32 = 1024;
pub const DBGP_ERR_BAD: u32 = 1;
pub const DBGP_ERR_SIGNAL: u32 = 2;
pub const DBGP_ERROR: u32 = 64;
pub const DBGP_GO: u32 = 32;
pub const DBGP_OUT: u32 = 16;
pub const QTD_TOGGLE: u32 = 2147483648;
pub const QTD_IOC: u32 = 32768;
pub const QTD_STS_ACTIVE: u32 = 128;
pub const QTD_STS_HALT: u32 = 64;
pub const QTD_STS_DBE: u32 = 32;
pub const QTD_STS_BABBLE: u32 = 16;
pub const QTD_STS_XACT: u32 = 8;
pub const QTD_STS_MMF: u32 = 4;
pub const QTD_STS_STS: u32 = 2;
pub const QTD_STS_PING: u32 = 1;
pub const Q_TYPE_ITD: u32 = 0;
pub const Q_TYPE_QH: u32 = 2;
pub const Q_TYPE_SITD: u32 = 4;
pub const Q_TYPE_FSTN: u32 = 6;
pub const QH_HEAD: u32 = 32768;
pub const QH_SMASK: u32 = 255;
pub const QH_CMASK: u32 = 65280;
pub const QH_HUBADDR: u32 = 8323072;
pub const QH_HUBPORT: u32 = 1065353216;
pub const QH_MULT: u32 = 3221225472;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type u8_ = u8;
pub type u16_ = u16;
pub type u32_ = u32;
pub type u64_ = u64;
pub type s8 = i8;
pub type s16 = i16;
pub type s32 = i32;
pub type s64 = i64;
pub type vu8 = u8_;
pub type vu16 = u16_;
pub type vu32 = u32_;
pub type vu64 = u64_;
pub type vs8 = s8;
pub type vs16 = s16;
pub type vs32 = s32;
pub type vs64 = s64;
pub type sfp16 = s16;
pub type sfp32 = s32;
pub type ufp16 = u16_;
pub type ufp32 = u32_;
pub type f32_ = f32;
pub type f64_ = f64;
pub type vf32 = f32;
pub type vf64 = f64;
pub type lba_t = ::std::os::raw::c_ulonglong;
pub type BOOL = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __argv {
    pub magic: ::std::os::raw::c_int,
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __argv"][::std::mem::size_of::<__argv>() - 16usize];
    ["Alignment of __argv"][::std::mem::align_of::<__argv>() - 8usize];
    ["Offset of field: __argv::magic"][::std::mem::offset_of!(__argv, magic) - 0usize];
    ["Offset of field: __argv::argc"][::std::mem::offset_of!(__argv, argc) - 4usize];
    ["Offset of field: __argv::argv"][::std::mem::offset_of!(__argv, argv) - 8usize];
};
unsafe extern "C" {
    pub static mut __system_argv: *mut __argv;
}
pub type gid_t = __gid_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type useconds_t = __useconds_t;
pub type pid_t = __pid_t;
pub type socklen_t = __socklen_t;
unsafe extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
unsafe extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn closefrom(__lowfd: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
        __offset: __off_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __offset: __off_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
unsafe extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getcwd(__buf: *mut ::std::os::raw::c_char, __size: usize)
        -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int) -> !;
}
pub const _PC_LINK_MAX: _bindgen_ty_1 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_1 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_1 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_1 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_1 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_1 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_1 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_1 = 7;
pub const _PC_VDISABLE: _bindgen_ty_1 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_1 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_1 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_1 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_1 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_1 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_1 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_1 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_1 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_1 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_1 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_1 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_1 = 20;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_2 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_2 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_2 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_2 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_2 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_2 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_2 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_2 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_2 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_2 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_2 = 10;
pub const _SC_TIMERS: _bindgen_ty_2 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_2 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_2 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_2 = 14;
pub const _SC_FSYNC: _bindgen_ty_2 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_2 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_2 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_2 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_2 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_2 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_2 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_2 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_2 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_2 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_2 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_2 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_2 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_2 = 28;
pub const _SC_VERSION: _bindgen_ty_2 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_2 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_2 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_2 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_2 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_2 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_2 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_2 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_2 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_2 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_2 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_2 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_2 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_2 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_2 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_2 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_2 = 45;
pub const _SC_2_VERSION: _bindgen_ty_2 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_2 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_2 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_2 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_2 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_2 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_2 = 52;
pub const _SC_PII: _bindgen_ty_2 = 53;
pub const _SC_PII_XTI: _bindgen_ty_2 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_2 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_2 = 56;
pub const _SC_PII_OSI: _bindgen_ty_2 = 57;
pub const _SC_POLL: _bindgen_ty_2 = 58;
pub const _SC_SELECT: _bindgen_ty_2 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_2 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_2 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_2 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_2 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_2 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_2 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_2 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_2 = 66;
pub const _SC_THREADS: _bindgen_ty_2 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_2 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_2 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_2 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_2 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_2 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_2 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_2 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_2 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_2 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_2 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_2 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_2 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_2 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_2 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_2 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_2 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_2 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_2 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_2 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_2 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_2 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_2 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_2 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_2 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_2 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_2 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_2 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_2 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_2 = 96;
pub const _SC_2_UPE: _bindgen_ty_2 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_2 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_2 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_2 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_2 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_2 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_2 = 103;
pub const _SC_INT_MAX: _bindgen_ty_2 = 104;
pub const _SC_INT_MIN: _bindgen_ty_2 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_2 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_2 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_2 = 108;
pub const _SC_NZERO: _bindgen_ty_2 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_2 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_2 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_2 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_2 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_2 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_2 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_2 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_2 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_2 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_2 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_2 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_2 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_2 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_2 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_2 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_2 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_2 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_2 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_2 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_2 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_2 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_2 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_2 = 132;
pub const _SC_BARRIERS: _bindgen_ty_2 = 133;
pub const _SC_BASE: _bindgen_ty_2 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_2 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_2 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_2 = 137;
pub const _SC_CPUTIME: _bindgen_ty_2 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_2 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_2 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_2 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_2 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_2 = 143;
pub const _SC_FIFO: _bindgen_ty_2 = 144;
pub const _SC_PIPE: _bindgen_ty_2 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_2 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_2 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_2 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_2 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_2 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_2 = 151;
pub const _SC_NETWORKING: _bindgen_ty_2 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_2 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_2 = 154;
pub const _SC_REGEXP: _bindgen_ty_2 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_2 = 156;
pub const _SC_SHELL: _bindgen_ty_2 = 157;
pub const _SC_SIGNALS: _bindgen_ty_2 = 158;
pub const _SC_SPAWN: _bindgen_ty_2 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_2 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_2 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_2 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_2 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_2 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_2 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_2 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_2 = 167;
pub const _SC_2_PBS: _bindgen_ty_2 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_2 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_2 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_2 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_2 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_2 = 173;
pub const _SC_STREAMS: _bindgen_ty_2 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_2 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_2 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_2 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_2 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_2 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_2 = 180;
pub const _SC_TRACE: _bindgen_ty_2 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_2 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_2 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_2 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_2 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_2 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_2 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_2 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_2 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_2 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_2 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_2 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_2 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_2 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_2 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_2 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_2 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_2 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_2 = 199;
pub const _SC_IPV6: _bindgen_ty_2 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_2 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_2 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_2 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_2 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_2 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_2 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_2 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_2 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_2 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_2 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_2 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_2 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_2 = 248;
pub const _SC_MINSIGSTKSZ: _bindgen_ty_2 = 249;
pub const _SC_SIGSTKSZ: _bindgen_ty_2 = 250;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const _CS_PATH: _bindgen_ty_3 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_3 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_3 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_3 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_3 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_3 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_3 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_3 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_3 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_3 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_3 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_3 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_3 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_3 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_3 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_3 = 1149;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn getpid() -> __pid_t;
}
unsafe extern "C" {
    pub fn getppid() -> __pid_t;
}
unsafe extern "C" {
    pub fn getpgrp() -> __pid_t;
}
unsafe extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
unsafe extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
unsafe extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setsid() -> __pid_t;
}
unsafe extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
unsafe extern "C" {
    pub fn getuid() -> __uid_t;
}
unsafe extern "C" {
    pub fn geteuid() -> __uid_t;
}
unsafe extern "C" {
    pub fn getgid() -> __gid_t;
}
unsafe extern "C" {
    pub fn getegid() -> __gid_t;
}
unsafe extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fork() -> __pid_t;
}
unsafe extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
unsafe extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: usize,
        __offset: usize,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn endusershell();
}
unsafe extern "C" {
    pub fn setusershell();
}
unsafe extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn sync();
}
unsafe extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn crypt(
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
pub type spinlock_t = ::std::os::raw::c_uint;
pub const gfp_t_GFP_KERNEL: gfp_t = 1;
pub type gfp_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timer_list {
    pub time: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timer_list"][::std::mem::size_of::<timer_list>() - 4usize];
    ["Alignment of timer_list"][::std::mem::align_of::<timer_list>() - 4usize];
    ["Offset of field: timer_list::time"][::std::mem::offset_of!(timer_list, time) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _usbctrlrequest {
    pub bRequestType: u8_,
    pub bRequest: u8_,
    pub wValue: u16_,
    pub wIndex: u16_,
    pub wLength: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _usbctrlrequest"][::std::mem::size_of::<_usbctrlrequest>() - 8usize];
    ["Alignment of _usbctrlrequest"][::std::mem::align_of::<_usbctrlrequest>() - 1usize];
    ["Offset of field: _usbctrlrequest::bRequestType"]
        [::std::mem::offset_of!(_usbctrlrequest, bRequestType) - 0usize];
    ["Offset of field: _usbctrlrequest::bRequest"]
        [::std::mem::offset_of!(_usbctrlrequest, bRequest) - 1usize];
    ["Offset of field: _usbctrlrequest::wValue"]
        [::std::mem::offset_of!(_usbctrlrequest, wValue) - 2usize];
    ["Offset of field: _usbctrlrequest::wIndex"]
        [::std::mem::offset_of!(_usbctrlrequest, wIndex) - 4usize];
    ["Offset of field: _usbctrlrequest::wLength"]
        [::std::mem::offset_of!(_usbctrlrequest, wLength) - 6usize];
};
pub type usbctrlrequest = _usbctrlrequest;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _usbendpointdesc {
    pub bLength: u8_,
    pub bDescriptorType: u8_,
    pub bEndpointAddress: u8_,
    pub bmAttributes: u8_,
    pub wMaxPacketSize: u16_,
    pub bInterval: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _usbendpointdesc"][::std::mem::size_of::<_usbendpointdesc>() - 7usize];
    ["Alignment of _usbendpointdesc"][::std::mem::align_of::<_usbendpointdesc>() - 1usize];
    ["Offset of field: _usbendpointdesc::bLength"]
        [::std::mem::offset_of!(_usbendpointdesc, bLength) - 0usize];
    ["Offset of field: _usbendpointdesc::bDescriptorType"]
        [::std::mem::offset_of!(_usbendpointdesc, bDescriptorType) - 1usize];
    ["Offset of field: _usbendpointdesc::bEndpointAddress"]
        [::std::mem::offset_of!(_usbendpointdesc, bEndpointAddress) - 2usize];
    ["Offset of field: _usbendpointdesc::bmAttributes"]
        [::std::mem::offset_of!(_usbendpointdesc, bmAttributes) - 3usize];
    ["Offset of field: _usbendpointdesc::wMaxPacketSize"]
        [::std::mem::offset_of!(_usbendpointdesc, wMaxPacketSize) - 4usize];
    ["Offset of field: _usbendpointdesc::bInterval"]
        [::std::mem::offset_of!(_usbendpointdesc, bInterval) - 6usize];
};
pub type usb_endpointdesc = _usbendpointdesc;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _usbinterfacedesc {
    pub bLength: u8_,
    pub bDescriptorType: u8_,
    pub bInterfaceNumber: u8_,
    pub bAlternateSetting: u8_,
    pub bNumEndpoints: u8_,
    pub bInterfaceClass: u8_,
    pub bInterfaceSubClass: u8_,
    pub bInterfaceProtocol: u8_,
    pub iInterface: u8_,
    pub extra: *mut u8_,
    pub extra_size: u8_,
    pub endpoints: *mut _usbendpointdesc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _usbinterfacedesc"][::std::mem::size_of::<_usbinterfacedesc>() - 26usize];
    ["Alignment of _usbinterfacedesc"][::std::mem::align_of::<_usbinterfacedesc>() - 1usize];
    ["Offset of field: _usbinterfacedesc::bLength"]
        [::std::mem::offset_of!(_usbinterfacedesc, bLength) - 0usize];
    ["Offset of field: _usbinterfacedesc::bDescriptorType"]
        [::std::mem::offset_of!(_usbinterfacedesc, bDescriptorType) - 1usize];
    ["Offset of field: _usbinterfacedesc::bInterfaceNumber"]
        [::std::mem::offset_of!(_usbinterfacedesc, bInterfaceNumber) - 2usize];
    ["Offset of field: _usbinterfacedesc::bAlternateSetting"]
        [::std::mem::offset_of!(_usbinterfacedesc, bAlternateSetting) - 3usize];
    ["Offset of field: _usbinterfacedesc::bNumEndpoints"]
        [::std::mem::offset_of!(_usbinterfacedesc, bNumEndpoints) - 4usize];
    ["Offset of field: _usbinterfacedesc::bInterfaceClass"]
        [::std::mem::offset_of!(_usbinterfacedesc, bInterfaceClass) - 5usize];
    ["Offset of field: _usbinterfacedesc::bInterfaceSubClass"]
        [::std::mem::offset_of!(_usbinterfacedesc, bInterfaceSubClass) - 6usize];
    ["Offset of field: _usbinterfacedesc::bInterfaceProtocol"]
        [::std::mem::offset_of!(_usbinterfacedesc, bInterfaceProtocol) - 7usize];
    ["Offset of field: _usbinterfacedesc::iInterface"]
        [::std::mem::offset_of!(_usbinterfacedesc, iInterface) - 8usize];
    ["Offset of field: _usbinterfacedesc::extra"]
        [::std::mem::offset_of!(_usbinterfacedesc, extra) - 9usize];
    ["Offset of field: _usbinterfacedesc::extra_size"]
        [::std::mem::offset_of!(_usbinterfacedesc, extra_size) - 17usize];
    ["Offset of field: _usbinterfacedesc::endpoints"]
        [::std::mem::offset_of!(_usbinterfacedesc, endpoints) - 18usize];
};
pub type usb_interfacedesc = _usbinterfacedesc;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _usbconfdesc {
    pub bLength: u8_,
    pub bDescriptorType: u8_,
    pub wTotalLength: u16_,
    pub bNumInterfaces: u8_,
    pub bConfigurationValue: u8_,
    pub iConfiguration: u8_,
    pub bmAttributes: u8_,
    pub bMaxPower: u8_,
    pub interfaces: *mut _usbinterfacedesc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _usbconfdesc"][::std::mem::size_of::<_usbconfdesc>() - 17usize];
    ["Alignment of _usbconfdesc"][::std::mem::align_of::<_usbconfdesc>() - 1usize];
    ["Offset of field: _usbconfdesc::bLength"]
        [::std::mem::offset_of!(_usbconfdesc, bLength) - 0usize];
    ["Offset of field: _usbconfdesc::bDescriptorType"]
        [::std::mem::offset_of!(_usbconfdesc, bDescriptorType) - 1usize];
    ["Offset of field: _usbconfdesc::wTotalLength"]
        [::std::mem::offset_of!(_usbconfdesc, wTotalLength) - 2usize];
    ["Offset of field: _usbconfdesc::bNumInterfaces"]
        [::std::mem::offset_of!(_usbconfdesc, bNumInterfaces) - 4usize];
    ["Offset of field: _usbconfdesc::bConfigurationValue"]
        [::std::mem::offset_of!(_usbconfdesc, bConfigurationValue) - 5usize];
    ["Offset of field: _usbconfdesc::iConfiguration"]
        [::std::mem::offset_of!(_usbconfdesc, iConfiguration) - 6usize];
    ["Offset of field: _usbconfdesc::bmAttributes"]
        [::std::mem::offset_of!(_usbconfdesc, bmAttributes) - 7usize];
    ["Offset of field: _usbconfdesc::bMaxPower"]
        [::std::mem::offset_of!(_usbconfdesc, bMaxPower) - 8usize];
    ["Offset of field: _usbconfdesc::interfaces"]
        [::std::mem::offset_of!(_usbconfdesc, interfaces) - 9usize];
};
pub type usb_configurationdesc = _usbconfdesc;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _usbdevdesc {
    pub bLength: u8_,
    pub bDescriptorType: u8_,
    pub bcdUSB: u16_,
    pub bDeviceClass: u8_,
    pub bDeviceSubClass: u8_,
    pub bDeviceProtocol: u8_,
    pub bMaxPacketSize0: u8_,
    pub idVendor: u16_,
    pub idProduct: u16_,
    pub bcdDevice: u16_,
    pub iManufacturer: u8_,
    pub iProduct: u8_,
    pub iSerialNumber: u8_,
    pub bNumConfigurations: u8_,
    pub configurations: *mut _usbconfdesc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _usbdevdesc"][::std::mem::size_of::<_usbdevdesc>() - 26usize];
    ["Alignment of _usbdevdesc"][::std::mem::align_of::<_usbdevdesc>() - 1usize];
    ["Offset of field: _usbdevdesc::bLength"]
        [::std::mem::offset_of!(_usbdevdesc, bLength) - 0usize];
    ["Offset of field: _usbdevdesc::bDescriptorType"]
        [::std::mem::offset_of!(_usbdevdesc, bDescriptorType) - 1usize];
    ["Offset of field: _usbdevdesc::bcdUSB"][::std::mem::offset_of!(_usbdevdesc, bcdUSB) - 2usize];
    ["Offset of field: _usbdevdesc::bDeviceClass"]
        [::std::mem::offset_of!(_usbdevdesc, bDeviceClass) - 4usize];
    ["Offset of field: _usbdevdesc::bDeviceSubClass"]
        [::std::mem::offset_of!(_usbdevdesc, bDeviceSubClass) - 5usize];
    ["Offset of field: _usbdevdesc::bDeviceProtocol"]
        [::std::mem::offset_of!(_usbdevdesc, bDeviceProtocol) - 6usize];
    ["Offset of field: _usbdevdesc::bMaxPacketSize0"]
        [::std::mem::offset_of!(_usbdevdesc, bMaxPacketSize0) - 7usize];
    ["Offset of field: _usbdevdesc::idVendor"]
        [::std::mem::offset_of!(_usbdevdesc, idVendor) - 8usize];
    ["Offset of field: _usbdevdesc::idProduct"]
        [::std::mem::offset_of!(_usbdevdesc, idProduct) - 10usize];
    ["Offset of field: _usbdevdesc::bcdDevice"]
        [::std::mem::offset_of!(_usbdevdesc, bcdDevice) - 12usize];
    ["Offset of field: _usbdevdesc::iManufacturer"]
        [::std::mem::offset_of!(_usbdevdesc, iManufacturer) - 14usize];
    ["Offset of field: _usbdevdesc::iProduct"]
        [::std::mem::offset_of!(_usbdevdesc, iProduct) - 15usize];
    ["Offset of field: _usbdevdesc::iSerialNumber"]
        [::std::mem::offset_of!(_usbdevdesc, iSerialNumber) - 16usize];
    ["Offset of field: _usbdevdesc::bNumConfigurations"]
        [::std::mem::offset_of!(_usbdevdesc, bNumConfigurations) - 17usize];
    ["Offset of field: _usbdevdesc::configurations"]
        [::std::mem::offset_of!(_usbdevdesc, configurations) - 18usize];
};
pub type usb_devdesc = _usbdevdesc;
unsafe extern "C" {
    pub fn USB_OpenDevice(
        device: *const ::std::os::raw::c_char,
        vid: u16_,
        pid: u16_,
        fd: *mut *mut ehci_device,
    ) -> s32;
}
unsafe extern "C" {
    pub fn USB_CloseDevice(fd: *mut *mut ehci_device) -> s32;
}
unsafe extern "C" {
    pub fn USB_GetDescriptors(
        ehci: *mut ehci_hcd,
        fd: *mut ehci_device,
        udd: *mut usb_devdesc,
    ) -> s32;
}
unsafe extern "C" {
    pub fn USB_FreeDescriptors(udd: *mut usb_devdesc);
}
unsafe extern "C" {
    pub fn USB_GetDeviceDescription(fd: *mut ehci_device, devdesc: *mut usb_devdesc) -> s32;
}
unsafe extern "C" {
    pub fn USB_SuspendDevice(fd: *mut ehci_device);
}
unsafe extern "C" {
    pub fn USB_ResumeDevice(fd: *mut ehci_device);
}
unsafe extern "C" {
    pub fn USB_ReadIntrMsg(
        fd: *mut ehci_device,
        bEndpoint: u8_,
        wLength: u16_,
        rpData: *mut ::std::os::raw::c_void,
    ) -> s32;
}
unsafe extern "C" {
    pub fn USB_ReadBlkMsg(
        fd: *mut ehci_device,
        bEndpoint: u8_,
        wLength: u16_,
        rpData: *mut ::std::os::raw::c_void,
    ) -> s32;
}
unsafe extern "C" {
    pub fn USB_ReadCtrlMsg(
        fd: *mut ehci_device,
        bmRequestType: u8_,
        bmRequest: u8_,
        wValue: u16_,
        wIndex: u16_,
        wLength: u16_,
        rpData: *mut ::std::os::raw::c_void,
    ) -> s32;
}
unsafe extern "C" {
    pub fn USB_WriteIntrMsg(
        fd: *mut ehci_device,
        bEndpoint: u8_,
        wLength: u16_,
        rpData: *mut ::std::os::raw::c_void,
    ) -> s32;
}
unsafe extern "C" {
    pub fn USB_WriteBlkMsg(
        ehci: *mut ehci_hcd,
        fd: *mut ehci_device,
        bEndpoint: u8_,
        wLength: u16_,
        rpData: *mut ::std::os::raw::c_void,
    ) -> s32;
}
unsafe extern "C" {
    pub fn USB_WriteCtrlMsg(
        ehci: *mut ehci_hcd,
        fd: *mut ehci_device,
        bmRequestType: u8_,
        bmRequest: u8_,
        wValue: u16_,
        wIndex: u16_,
        wLength: u16_,
        rpData: *mut ::std::os::raw::c_void,
    ) -> s32;
}
unsafe extern "C" {
    pub fn USB_GetConfiguration(
        ehci: *mut ehci_hcd,
        fd: *mut ehci_device,
        configuration: *mut u8_,
    ) -> s32;
}
unsafe extern "C" {
    pub fn USB_SetConfiguration(
        ehci: *mut ehci_hcd,
        fd: *mut ehci_device,
        configuration: u8_,
    ) -> s32;
}
unsafe extern "C" {
    pub fn USB_SetAlternativeInterface(
        ehci: *mut ehci_hcd,
        fd: *mut ehci_device,
        interface: u8_,
        alternateSetting: u8_,
    ) -> s32;
}
unsafe extern "C" {
    pub fn USB_ClearHalt(ehci: *mut ehci_hcd, fd: *mut ehci_device, endpointAddress: u8_) -> s32;
}
unsafe extern "C" {
    pub fn USB_GetDeviceList(
        devpath: *const ::std::os::raw::c_char,
        descr_buffer: *mut ::std::os::raw::c_void,
        num_descr: u8_,
        b0: u8_,
        cnt_descr: *mut u8_,
    ) -> s32;
}
unsafe extern "C" {
    pub fn USB_Alloc(size: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn USB_Free(ptr: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ehci_device {
    pub desc: usb_devdesc,
    pub id: ::std::os::raw::c_int,
    pub port: ::std::os::raw::c_int,
    pub fd: ::std::os::raw::c_int,
    pub toggles: u32_,
    pub busy: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ehci_device"][::std::mem::size_of::<ehci_device>() - 48usize];
    ["Alignment of ehci_device"][::std::mem::align_of::<ehci_device>() - 4usize];
    ["Offset of field: ehci_device::desc"][::std::mem::offset_of!(ehci_device, desc) - 0usize];
    ["Offset of field: ehci_device::id"][::std::mem::offset_of!(ehci_device, id) - 28usize];
    ["Offset of field: ehci_device::port"][::std::mem::offset_of!(ehci_device, port) - 32usize];
    ["Offset of field: ehci_device::fd"][::std::mem::offset_of!(ehci_device, fd) - 36usize];
    ["Offset of field: ehci_device::toggles"]
        [::std::mem::offset_of!(ehci_device, toggles) - 40usize];
    ["Offset of field: ehci_device::busy"][::std::mem::offset_of!(ehci_device, busy) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ehci_urb {
    pub setup_buffer: *mut ::std::os::raw::c_void,
    pub setup_dma: u32_,
    pub transfer_buffer: *mut ::std::os::raw::c_void,
    pub transfer_dma: u32_,
    pub transfer_buffer_length: u32_,
    pub actual_length: u32_,
    pub ep: u8_,
    pub input: u8_,
    pub maxpacket: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ehci_urb"][::std::mem::size_of::<ehci_urb>() - 48usize];
    ["Alignment of ehci_urb"][::std::mem::align_of::<ehci_urb>() - 8usize];
    ["Offset of field: ehci_urb::setup_buffer"]
        [::std::mem::offset_of!(ehci_urb, setup_buffer) - 0usize];
    ["Offset of field: ehci_urb::setup_dma"][::std::mem::offset_of!(ehci_urb, setup_dma) - 8usize];
    ["Offset of field: ehci_urb::transfer_buffer"]
        [::std::mem::offset_of!(ehci_urb, transfer_buffer) - 16usize];
    ["Offset of field: ehci_urb::transfer_dma"]
        [::std::mem::offset_of!(ehci_urb, transfer_dma) - 24usize];
    ["Offset of field: ehci_urb::transfer_buffer_length"]
        [::std::mem::offset_of!(ehci_urb, transfer_buffer_length) - 28usize];
    ["Offset of field: ehci_urb::actual_length"]
        [::std::mem::offset_of!(ehci_urb, actual_length) - 32usize];
    ["Offset of field: ehci_urb::ep"][::std::mem::offset_of!(ehci_urb, ep) - 36usize];
    ["Offset of field: ehci_urb::input"][::std::mem::offset_of!(ehci_urb, input) - 37usize];
    ["Offset of field: ehci_urb::maxpacket"][::std::mem::offset_of!(ehci_urb, maxpacket) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ehci_hcd {
    pub _regs: *mut ::std::os::raw::c_void,
    pub caps: *mut ehci_caps,
    pub regs: *mut ehci_regs,
    pub debug: *mut ehci_dbg_port,
    pub device: *mut ::std::os::raw::c_void,
    pub hcs_params: u32_,
    pub async_: *mut ehci_qh,
    pub asyncqh: *mut ehci_qh,
    pub qtds: [*mut ehci_qtd; 8usize],
    pub qtd_used: ::std::os::raw::c_int,
    pub next_statechange: ::std::os::raw::c_ulong,
    pub command: u32_,
    pub periodic: *mut u32_,
    pub periodic_dma: u32_,
    pub num_port: u8_,
    pub devices: [ehci_device; 8usize],
    pub ctrl_buffer: *mut ::std::os::raw::c_void,
    pub bus_id: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ehci_hcd"][::std::mem::size_of::<ehci_hcd>() - 568usize];
    ["Alignment of ehci_hcd"][::std::mem::align_of::<ehci_hcd>() - 8usize];
    ["Offset of field: ehci_hcd::_regs"][::std::mem::offset_of!(ehci_hcd, _regs) - 0usize];
    ["Offset of field: ehci_hcd::caps"][::std::mem::offset_of!(ehci_hcd, caps) - 8usize];
    ["Offset of field: ehci_hcd::regs"][::std::mem::offset_of!(ehci_hcd, regs) - 16usize];
    ["Offset of field: ehci_hcd::debug"][::std::mem::offset_of!(ehci_hcd, debug) - 24usize];
    ["Offset of field: ehci_hcd::device"][::std::mem::offset_of!(ehci_hcd, device) - 32usize];
    ["Offset of field: ehci_hcd::hcs_params"]
        [::std::mem::offset_of!(ehci_hcd, hcs_params) - 40usize];
    ["Offset of field: ehci_hcd::async_"][::std::mem::offset_of!(ehci_hcd, async_) - 48usize];
    ["Offset of field: ehci_hcd::asyncqh"][::std::mem::offset_of!(ehci_hcd, asyncqh) - 56usize];
    ["Offset of field: ehci_hcd::qtds"][::std::mem::offset_of!(ehci_hcd, qtds) - 64usize];
    ["Offset of field: ehci_hcd::qtd_used"][::std::mem::offset_of!(ehci_hcd, qtd_used) - 128usize];
    ["Offset of field: ehci_hcd::next_statechange"]
        [::std::mem::offset_of!(ehci_hcd, next_statechange) - 136usize];
    ["Offset of field: ehci_hcd::command"][::std::mem::offset_of!(ehci_hcd, command) - 144usize];
    ["Offset of field: ehci_hcd::periodic"][::std::mem::offset_of!(ehci_hcd, periodic) - 152usize];
    ["Offset of field: ehci_hcd::periodic_dma"]
        [::std::mem::offset_of!(ehci_hcd, periodic_dma) - 160usize];
    ["Offset of field: ehci_hcd::num_port"][::std::mem::offset_of!(ehci_hcd, num_port) - 164usize];
    ["Offset of field: ehci_hcd::devices"][::std::mem::offset_of!(ehci_hcd, devices) - 168usize];
    ["Offset of field: ehci_hcd::ctrl_buffer"]
        [::std::mem::offset_of!(ehci_hcd, ctrl_buffer) - 552usize];
    ["Offset of field: ehci_hcd::bus_id"][::std::mem::offset_of!(ehci_hcd, bus_id) - 560usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ehci_caps {
    pub hc_capbase: u32_,
    pub hcs_params: u32_,
    pub hcc_params: u32_,
    pub portroute: [u8_; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ehci_caps"][::std::mem::size_of::<ehci_caps>() - 20usize];
    ["Alignment of ehci_caps"][::std::mem::align_of::<ehci_caps>() - 1usize];
    ["Offset of field: ehci_caps::hc_capbase"]
        [::std::mem::offset_of!(ehci_caps, hc_capbase) - 0usize];
    ["Offset of field: ehci_caps::hcs_params"]
        [::std::mem::offset_of!(ehci_caps, hcs_params) - 4usize];
    ["Offset of field: ehci_caps::hcc_params"]
        [::std::mem::offset_of!(ehci_caps, hcc_params) - 8usize];
    ["Offset of field: ehci_caps::portroute"]
        [::std::mem::offset_of!(ehci_caps, portroute) - 12usize];
};
#[repr(C, packed)]
pub struct ehci_regs {
    pub command: u32_,
    pub status: u32_,
    pub intr_enable: u32_,
    pub frame_index: u32_,
    pub segment: u32_,
    pub frame_list: u32_,
    pub async_next: u32_,
    pub reserved: [u32_; 9usize],
    pub configured_flag: u32_,
    pub port_status: __IncompleteArrayField<u32_>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ehci_regs"][::std::mem::size_of::<ehci_regs>() - 68usize];
    ["Alignment of ehci_regs"][::std::mem::align_of::<ehci_regs>() - 1usize];
    ["Offset of field: ehci_regs::command"][::std::mem::offset_of!(ehci_regs, command) - 0usize];
    ["Offset of field: ehci_regs::status"][::std::mem::offset_of!(ehci_regs, status) - 4usize];
    ["Offset of field: ehci_regs::intr_enable"]
        [::std::mem::offset_of!(ehci_regs, intr_enable) - 8usize];
    ["Offset of field: ehci_regs::frame_index"]
        [::std::mem::offset_of!(ehci_regs, frame_index) - 12usize];
    ["Offset of field: ehci_regs::segment"][::std::mem::offset_of!(ehci_regs, segment) - 16usize];
    ["Offset of field: ehci_regs::frame_list"]
        [::std::mem::offset_of!(ehci_regs, frame_list) - 20usize];
    ["Offset of field: ehci_regs::async_next"]
        [::std::mem::offset_of!(ehci_regs, async_next) - 24usize];
    ["Offset of field: ehci_regs::reserved"][::std::mem::offset_of!(ehci_regs, reserved) - 28usize];
    ["Offset of field: ehci_regs::configured_flag"]
        [::std::mem::offset_of!(ehci_regs, configured_flag) - 64usize];
    ["Offset of field: ehci_regs::port_status"]
        [::std::mem::offset_of!(ehci_regs, port_status) - 68usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ehci_dbg_port {
    pub control: u32_,
    pub pids: u32_,
    pub data03: u32_,
    pub data47: u32_,
    pub address: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ehci_dbg_port"][::std::mem::size_of::<ehci_dbg_port>() - 20usize];
    ["Alignment of ehci_dbg_port"][::std::mem::align_of::<ehci_dbg_port>() - 1usize];
    ["Offset of field: ehci_dbg_port::control"]
        [::std::mem::offset_of!(ehci_dbg_port, control) - 0usize];
    ["Offset of field: ehci_dbg_port::pids"][::std::mem::offset_of!(ehci_dbg_port, pids) - 4usize];
    ["Offset of field: ehci_dbg_port::data03"]
        [::std::mem::offset_of!(ehci_dbg_port, data03) - 8usize];
    ["Offset of field: ehci_dbg_port::data47"]
        [::std::mem::offset_of!(ehci_dbg_port, data47) - 12usize];
    ["Offset of field: ehci_dbg_port::address"]
        [::std::mem::offset_of!(ehci_dbg_port, address) - 16usize];
};
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct ehci_qtd {
    pub hw_next: u32_,
    pub hw_alt_next: u32_,
    pub hw_token: u32_,
    pub hw_buf: [u32_; 5usize],
    pub hw_buf_hi: [u32_; 5usize],
    pub qtd_dma: u32_,
    pub next: *mut ehci_qtd,
    pub urb: *mut ehci_urb,
    pub length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ehci_qtd"][::std::mem::size_of::<ehci_qtd>() - 96usize];
    ["Alignment of ehci_qtd"][::std::mem::align_of::<ehci_qtd>() - 32usize];
    ["Offset of field: ehci_qtd::hw_next"][::std::mem::offset_of!(ehci_qtd, hw_next) - 0usize];
    ["Offset of field: ehci_qtd::hw_alt_next"]
        [::std::mem::offset_of!(ehci_qtd, hw_alt_next) - 4usize];
    ["Offset of field: ehci_qtd::hw_token"][::std::mem::offset_of!(ehci_qtd, hw_token) - 8usize];
    ["Offset of field: ehci_qtd::hw_buf"][::std::mem::offset_of!(ehci_qtd, hw_buf) - 12usize];
    ["Offset of field: ehci_qtd::hw_buf_hi"][::std::mem::offset_of!(ehci_qtd, hw_buf_hi) - 32usize];
    ["Offset of field: ehci_qtd::qtd_dma"][::std::mem::offset_of!(ehci_qtd, qtd_dma) - 52usize];
    ["Offset of field: ehci_qtd::next"][::std::mem::offset_of!(ehci_qtd, next) - 56usize];
    ["Offset of field: ehci_qtd::urb"][::std::mem::offset_of!(ehci_qtd, urb) - 64usize];
    ["Offset of field: ehci_qtd::length"][::std::mem::offset_of!(ehci_qtd, length) - 72usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union ehci_shadow {
    pub qh: *mut ehci_qh,
    pub itd: *mut ehci_itd,
    pub sitd: *mut ehci_sitd,
    pub fstn: *mut ehci_fstn,
    pub hw_next: *mut u32_,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ehci_shadow"][::std::mem::size_of::<ehci_shadow>() - 8usize];
    ["Alignment of ehci_shadow"][::std::mem::align_of::<ehci_shadow>() - 8usize];
    ["Offset of field: ehci_shadow::qh"][::std::mem::offset_of!(ehci_shadow, qh) - 0usize];
    ["Offset of field: ehci_shadow::itd"][::std::mem::offset_of!(ehci_shadow, itd) - 0usize];
    ["Offset of field: ehci_shadow::sitd"][::std::mem::offset_of!(ehci_shadow, sitd) - 0usize];
    ["Offset of field: ehci_shadow::fstn"][::std::mem::offset_of!(ehci_shadow, fstn) - 0usize];
    ["Offset of field: ehci_shadow::hw_next"]
        [::std::mem::offset_of!(ehci_shadow, hw_next) - 0usize];
    ["Offset of field: ehci_shadow::ptr"][::std::mem::offset_of!(ehci_shadow, ptr) - 0usize];
};
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct ehci_qh {
    pub hw_next: u32_,
    pub hw_info1: u32_,
    pub hw_info2: u32_,
    pub hw_current: u32_,
    pub hw_qtd_next: u32_,
    pub hw_alt_next: u32_,
    pub hw_token: u32_,
    pub hw_buf: [u32_; 5usize],
    pub hw_buf_hi: [u32_; 5usize],
    pub qh_dma: u32_,
    pub qtd_head: *mut ehci_qtd,
    pub ehci: *mut ehci_hcd,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ehci_qh"][::std::mem::size_of::<ehci_qh>() - 96usize];
    ["Alignment of ehci_qh"][::std::mem::align_of::<ehci_qh>() - 32usize];
    ["Offset of field: ehci_qh::hw_next"][::std::mem::offset_of!(ehci_qh, hw_next) - 0usize];
    ["Offset of field: ehci_qh::hw_info1"][::std::mem::offset_of!(ehci_qh, hw_info1) - 4usize];
    ["Offset of field: ehci_qh::hw_info2"][::std::mem::offset_of!(ehci_qh, hw_info2) - 8usize];
    ["Offset of field: ehci_qh::hw_current"][::std::mem::offset_of!(ehci_qh, hw_current) - 12usize];
    ["Offset of field: ehci_qh::hw_qtd_next"]
        [::std::mem::offset_of!(ehci_qh, hw_qtd_next) - 16usize];
    ["Offset of field: ehci_qh::hw_alt_next"]
        [::std::mem::offset_of!(ehci_qh, hw_alt_next) - 20usize];
    ["Offset of field: ehci_qh::hw_token"][::std::mem::offset_of!(ehci_qh, hw_token) - 24usize];
    ["Offset of field: ehci_qh::hw_buf"][::std::mem::offset_of!(ehci_qh, hw_buf) - 28usize];
    ["Offset of field: ehci_qh::hw_buf_hi"][::std::mem::offset_of!(ehci_qh, hw_buf_hi) - 48usize];
    ["Offset of field: ehci_qh::qh_dma"][::std::mem::offset_of!(ehci_qh, qh_dma) - 68usize];
    ["Offset of field: ehci_qh::qtd_head"][::std::mem::offset_of!(ehci_qh, qtd_head) - 72usize];
    ["Offset of field: ehci_qh::ehci"][::std::mem::offset_of!(ehci_qh, ehci) - 80usize];
};
unsafe extern "C" {
    pub fn ehci_maligned(
        size: ::std::os::raw::c_int,
        alignement: ::std::os::raw::c_int,
        crossing: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn ehci_virt_to_dma(arg1: *mut ::std::os::raw::c_void) -> u32_;
}
unsafe extern "C" {
    pub fn ehci_dma_map_to(buf: *mut ::std::os::raw::c_void, len: usize) -> u32_;
}
unsafe extern "C" {
    pub fn ehci_dma_map_from(buf: *mut ::std::os::raw::c_void, len: usize) -> u32_;
}
unsafe extern "C" {
    pub fn ehci_dma_map_bidir(buf: *mut ::std::os::raw::c_void, len: usize) -> u32_;
}
unsafe extern "C" {
    pub fn ehci_dma_unmap_to(buf: u32_, len: usize);
}
unsafe extern "C" {
    pub fn ehci_dma_unmap_from(buf: u32_, len: usize);
}
unsafe extern "C" {
    pub fn ehci_dma_unmap_bidir(buf: u32_, len: usize);
}
unsafe extern "C" {
    pub fn ehci_usleep(time: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ehci_msleep(time: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ehci_control_message(
        ehci: *mut ehci_hcd,
        dev: *mut ehci_device,
        bmRequestType: u8_,
        bmRequest: u8_,
        wValue: u16_,
        wIndex: u16_,
        wLength: u16_,
        buf: *mut ::std::os::raw::c_void,
    ) -> s32;
}
unsafe extern "C" {
    pub fn ehci_bulk_message(
        ehci: *mut ehci_hcd,
        dev: *mut ehci_device,
        bEndpoint: u8_,
        wLength: u16_,
        rpData: *mut ::std::os::raw::c_void,
    ) -> s32;
}
unsafe extern "C" {
    pub fn ehci_discover(ehci: *mut ehci_hcd) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ehci_get_device_list(
        ehci: *mut ehci_hcd,
        maxdev: u8_,
        b0: u8_,
        num: *mut u8_,
        buf: *mut u16_,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ehci_reset_port2(
        ehci: *mut ehci_hcd,
        port: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ehci_open_device(
        ehci: *mut ehci_hcd,
        vid: ::std::os::raw::c_int,
        pid: ::std::os::raw::c_int,
        fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ehci_close_device(dev: *mut ehci_device) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ehci_fd_to_dev(
        ehci: *mut ehci_hcd,
        fd: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn ehci_release_ports(ehci: *mut ehci_hcd) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn USBStorage_Init() -> s32;
}
unsafe extern "C" {
    pub fn USBStorage_Read_Sectors(
        device: ::std::os::raw::c_int,
        sector: u32_,
        numSectors: u32_,
        buffer: *mut ::std::os::raw::c_void,
    ) -> s32;
}
unsafe extern "C" {
    pub fn USBStorage_Read_Stress(
        sector: u32_,
        numSectors: u32_,
        buffer: *mut ::std::os::raw::c_void,
    ) -> s32;
}
unsafe extern "C" {
    pub fn USBStorage_Write_Sectors(
        device: ::std::os::raw::c_int,
        sector: u32_,
        numSectors: u32_,
        buffer: *const ::std::os::raw::c_void,
    ) -> s32;
}
unsafe extern "C" {
    pub fn EHCI_Init() -> s32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ehci_itd {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ehci_sitd {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ehci_fstn {
    pub _address: u8,
}
