/* automatically generated by rust-bindgen 0.72.1 */

pub const SFCX_CONFIG: u32 = 0;
pub const SFCX_STATUS: u32 = 4;
pub const SFCX_COMMAND: u32 = 8;
pub const SFCX_ADDRESS: u32 = 12;
pub const SFCX_DATA: u32 = 16;
pub const SFCX_LOGICAL: u32 = 20;
pub const SFCX_PHYSICAL: u32 = 24;
pub const SFCX_DPHYSADDR: u32 = 28;
pub const SFCX_MPHYSADDR: u32 = 32;
pub const SFCX_PHISON: u32 = 252;
pub const PAGE_BUF_TO_REG: u32 = 0;
pub const REG_TO_PAGE_BUF: u32 = 1;
pub const LOG_PAGE_TO_BUF: u32 = 2;
pub const PHY_PAGE_TO_BUF: u32 = 3;
pub const WRITE_PAGE_TO_PHY: u32 = 4;
pub const BLOCK_ERASE: u32 = 5;
pub const DMA_LOG_TO_RAM: u32 = 6;
pub const DMA_PHY_TO_RAM: u32 = 7;
pub const DMA_RAM_TO_PHY: u32 = 8;
pub const UNLOCK_CMD_0: u32 = 85;
pub const UNLOCK_CMD_1: u32 = 170;
pub const CONFIG_DBG_MUX_SEL: u32 = 2080374784;
pub const CONFIG_DIS_EXT_ER: u32 = 33554432;
pub const CONFIG_CSR_DLY: u32 = 33423360;
pub const CONFIG_ULT_DLY: u32 = 129024;
pub const CONFIG_BYPASS: u32 = 1024;
pub const CONFIG_DMA_LEN: u32 = 960;
pub const CONFIG_FLSH_SIZE: u32 = 48;
pub const CONFIG_WP_EN: u32 = 8;
pub const CONFIG_INT_EN: u32 = 4;
pub const CONFIG_ECC_DIS: u32 = 2;
pub const CONFIG_SW_RST: u32 = 1;
pub const STATUS_ILL_LOG: u32 = 2048;
pub const STATUS_PIN_WP_N: u32 = 1024;
pub const STATUS_PIN_BY_N: u32 = 512;
pub const STATUS_INT_CP: u32 = 256;
pub const STATUS_ADDR_ER: u32 = 128;
pub const STATUS_BB_ER: u32 = 64;
pub const STATUS_RNP_ER: u32 = 32;
pub const STATUS_ECC_ER: u32 = 28;
pub const STATUS_WR_ER: u32 = 2;
pub const STATUS_BUSY: u32 = 1;
pub const STATUS_ERROR: u32 = 2302;
pub const PAGE_VALID: u32 = 67108864;
pub const PAGE_PID: u32 = 67108352;
pub const MAX_PAGE_SZ: u32 = 528;
pub const MAX_BLOCK_SZ: u32 = 270336;
pub const META_TYPE_0: u32 = 0;
pub const META_TYPE_1: u32 = 1;
pub const META_TYPE_2: u32 = 2;
pub const CONFIG_BLOCKS: u32 = 4;
pub const RAW_NAND_64: u32 = 69206016;
pub const SFCX_INITIALIZED: u32 = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfc {
    pub initialized: ::std::os::raw::c_int,
    pub meta_type: ::std::os::raw::c_int,
    pub page_sz: ::std::os::raw::c_int,
    pub meta_sz: ::std::os::raw::c_int,
    pub page_sz_phys: ::std::os::raw::c_int,
    pub pages_in_block: ::std::os::raw::c_int,
    pub block_sz: ::std::os::raw::c_int,
    pub block_sz_phys: ::std::os::raw::c_int,
    pub size_mb: ::std::os::raw::c_int,
    pub size_bytes: ::std::os::raw::c_int,
    pub size_bytes_phys: ::std::os::raw::c_int,
    pub size_pages: ::std::os::raw::c_int,
    pub size_blocks: ::std::os::raw::c_int,
    pub blocks_per_lg_block: ::std::os::raw::c_int,
    pub size_usable_fs: ::std::os::raw::c_int,
    pub addr_config: ::std::os::raw::c_int,
    pub len_config: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sfc"][::std::mem::size_of::<sfc>() - 68usize];
    ["Alignment of sfc"][::std::mem::align_of::<sfc>() - 4usize];
    ["Offset of field: sfc::initialized"][::std::mem::offset_of!(sfc, initialized) - 0usize];
    ["Offset of field: sfc::meta_type"][::std::mem::offset_of!(sfc, meta_type) - 4usize];
    ["Offset of field: sfc::page_sz"][::std::mem::offset_of!(sfc, page_sz) - 8usize];
    ["Offset of field: sfc::meta_sz"][::std::mem::offset_of!(sfc, meta_sz) - 12usize];
    ["Offset of field: sfc::page_sz_phys"][::std::mem::offset_of!(sfc, page_sz_phys) - 16usize];
    ["Offset of field: sfc::pages_in_block"][::std::mem::offset_of!(sfc, pages_in_block) - 20usize];
    ["Offset of field: sfc::block_sz"][::std::mem::offset_of!(sfc, block_sz) - 24usize];
    ["Offset of field: sfc::block_sz_phys"][::std::mem::offset_of!(sfc, block_sz_phys) - 28usize];
    ["Offset of field: sfc::size_mb"][::std::mem::offset_of!(sfc, size_mb) - 32usize];
    ["Offset of field: sfc::size_bytes"][::std::mem::offset_of!(sfc, size_bytes) - 36usize];
    ["Offset of field: sfc::size_bytes_phys"]
        [::std::mem::offset_of!(sfc, size_bytes_phys) - 40usize];
    ["Offset of field: sfc::size_pages"][::std::mem::offset_of!(sfc, size_pages) - 44usize];
    ["Offset of field: sfc::size_blocks"][::std::mem::offset_of!(sfc, size_blocks) - 48usize];
    ["Offset of field: sfc::blocks_per_lg_block"]
        [::std::mem::offset_of!(sfc, blocks_per_lg_block) - 52usize];
    ["Offset of field: sfc::size_usable_fs"][::std::mem::offset_of!(sfc, size_usable_fs) - 56usize];
    ["Offset of field: sfc::addr_config"][::std::mem::offset_of!(sfc, addr_config) - 60usize];
    ["Offset of field: sfc::len_config"][::std::mem::offset_of!(sfc, len_config) - 64usize];
};
unsafe extern "C" {
    pub fn sfcx_init() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn sfcx_writereg(addr: ::std::os::raw::c_int, data: ::std::os::raw::c_ulong);
}
unsafe extern "C" {
    pub fn sfcx_readreg(addr: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn sfcx_erase_block(address: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sfcx_read_page(
        data: *mut ::std::os::raw::c_uchar,
        address: ::std::os::raw::c_int,
        raw: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sfcx_write_page(
        data: *mut ::std::os::raw::c_uchar,
        address: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sfcx_read_block(
        data: *mut ::std::os::raw::c_uchar,
        address: ::std::os::raw::c_int,
        raw: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sfcx_write_block(
        data: *mut ::std::os::raw::c_uchar,
        address: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sfcx_calcecc(data: *mut ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn sfcx_get_blocknumber(data: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sfcx_set_blocknumber(data: *mut ::std::os::raw::c_uchar, num: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn sfcx_get_blockversion(data: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sfcx_set_blockversion(data: *mut ::std::os::raw::c_uchar, ver: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn sfcx_set_pagevalid(data: *mut ::std::os::raw::c_uchar);
}
unsafe extern "C" {
    pub fn sfcx_set_pageinvalid(data: *mut ::std::os::raw::c_uchar);
}
unsafe extern "C" {
    pub fn sfcx_is_pagevalid(data: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sfcx_is_pagezeroed(data: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sfcx_is_pageerased(data: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sfcx_block_to_address(block: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sfcx_address_to_block(address: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sfcx_block_to_rawaddress(block: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sfcx_rawaddress_to_block(address: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rawflash_writeImage(
        len: ::std::os::raw::c_int,
        f: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn try_rawflash(filename: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sfcx_read_metadata_type() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut sfc: sfc;
}
