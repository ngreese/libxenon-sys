/* automatically generated by rust-bindgen 0.72.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memstats_s {
    pub mem_totalbytes: ::std::os::raw::c_int,
    pub mem_allocbytes: ::std::os::raw::c_int,
    pub mem_freebytes: ::std::os::raw::c_int,
    pub mem_allocnodes: ::std::os::raw::c_int,
    pub mem_freenodes: ::std::os::raw::c_int,
    pub mem_largest: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of memstats_s"][::std::mem::size_of::<memstats_s>() - 24usize];
    ["Alignment of memstats_s"][::std::mem::align_of::<memstats_s>() - 4usize];
    ["Offset of field: memstats_s::mem_totalbytes"]
        [::std::mem::offset_of!(memstats_s, mem_totalbytes) - 0usize];
    ["Offset of field: memstats_s::mem_allocbytes"]
        [::std::mem::offset_of!(memstats_s, mem_allocbytes) - 4usize];
    ["Offset of field: memstats_s::mem_freebytes"]
        [::std::mem::offset_of!(memstats_s, mem_freebytes) - 8usize];
    ["Offset of field: memstats_s::mem_allocnodes"]
        [::std::mem::offset_of!(memstats_s, mem_allocnodes) - 12usize];
    ["Offset of field: memstats_s::mem_freenodes"]
        [::std::mem::offset_of!(memstats_s, mem_freenodes) - 16usize];
    ["Offset of field: memstats_s::mem_largest"]
        [::std::mem::offset_of!(memstats_s, mem_largest) - 20usize];
};
pub type memstats_t = memstats_s;
pub const memnode_status_t_memnode_free: memnode_status_t = 0;
pub const memnode_status_t_memnode_alloc: memnode_status_t = 1;
pub type memnode_status_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memnode_s {
    pub seal: ::std::os::raw::c_uint,
    pub next: *mut memnode_s,
    pub length: ::std::os::raw::c_uint,
    pub status: memnode_status_t,
    pub data: *mut ::std::os::raw::c_uchar,
    pub memnodeptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of memnode_s"][::std::mem::size_of::<memnode_s>() - 40usize];
    ["Alignment of memnode_s"][::std::mem::align_of::<memnode_s>() - 8usize];
    ["Offset of field: memnode_s::seal"][::std::mem::offset_of!(memnode_s, seal) - 0usize];
    ["Offset of field: memnode_s::next"][::std::mem::offset_of!(memnode_s, next) - 8usize];
    ["Offset of field: memnode_s::length"][::std::mem::offset_of!(memnode_s, length) - 16usize];
    ["Offset of field: memnode_s::status"][::std::mem::offset_of!(memnode_s, status) - 20usize];
    ["Offset of field: memnode_s::data"][::std::mem::offset_of!(memnode_s, data) - 24usize];
    ["Offset of field: memnode_s::memnodeptr"]
        [::std::mem::offset_of!(memnode_s, memnodeptr) - 32usize];
};
pub type memnode_t = memnode_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mempool_s {
    pub root: *mut memnode_t,
    pub base: *mut ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mempool_s"][::std::mem::size_of::<mempool_s>() - 24usize];
    ["Alignment of mempool_s"][::std::mem::align_of::<mempool_s>() - 8usize];
    ["Offset of field: mempool_s::root"][::std::mem::offset_of!(mempool_s, root) - 0usize];
    ["Offset of field: mempool_s::base"][::std::mem::offset_of!(mempool_s, base) - 8usize];
    ["Offset of field: mempool_s::length"][::std::mem::offset_of!(mempool_s, length) - 16usize];
};
pub type mempool_t = mempool_s;
unsafe extern "C" {
    pub fn kmeminit(
        pool: *mut mempool_t,
        buffer: *mut ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn kfree(pool: *mut mempool_t, ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn kmalloc(
        pool: *mut mempool_t,
        size: ::std::os::raw::c_uint,
        align: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn kmemchk(pool: *mut mempool_t, verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut kmempool: mempool_t;
}
unsafe extern "C" {
    pub fn kmempoolbase(pool: *mut mempool_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn kmempoolsize(pool: *mut mempool_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn kmemstats(pool: *mut mempool_t, stats: *mut memstats_t) -> ::std::os::raw::c_int;
}
