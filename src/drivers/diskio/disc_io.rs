/* automatically generated by rust-bindgen 0.72.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const NULL: u32 = 0;
pub const LITTLE_ENDIAN: u32 = 3412;
pub const BIG_ENDIAN: u32 = 1234;
pub const BYTE_ORDER: u32 = 1234;
pub const ARGV_MAGIC: u32 = 1600221799;
pub const MAXDEVICES: u32 = 16;
pub const DISKIO_ERROR_NO_MEDIA: i32 = -8;
pub const FEATURE_MEDIUM_CANREAD: u32 = 1;
pub const FEATURE_MEDIUM_CANWRITE: u32 = 2;
pub const FEATURE_XENON_ATA: u32 = 256;
pub const FEATURE_XENON_ATAPI: u32 = 512;
pub const FEATURE_XENON_USB: u32 = 1024;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type u8_ = u8;
pub type u16_ = u16;
pub type u32_ = u32;
pub type u64_ = u64;
pub type s8 = i8;
pub type s16 = i16;
pub type s32 = i32;
pub type s64 = i64;
pub type vu8 = u8_;
pub type vu16 = u16_;
pub type vu32 = u32_;
pub type vu64 = u64_;
pub type vs8 = s8;
pub type vs16 = s16;
pub type vs32 = s32;
pub type vs64 = s64;
pub type sfp16 = s16;
pub type sfp32 = s32;
pub type ufp16 = u16_;
pub type ufp32 = u32_;
pub type f32_ = f32;
pub type f64_ = f64;
pub type vf32 = f32;
pub type vf64 = f64;
pub type lba_t = ::std::os::raw::c_ulonglong;
pub type BOOL = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __argv {
    pub magic: ::std::os::raw::c_int,
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __argv"][::std::mem::size_of::<__argv>() - 16usize];
    ["Alignment of __argv"][::std::mem::align_of::<__argv>() - 8usize];
    ["Offset of field: __argv::magic"][::std::mem::offset_of!(__argv, magic) - 0usize];
    ["Offset of field: __argv::argc"][::std::mem::offset_of!(__argv, argc) - 4usize];
    ["Offset of field: __argv::argv"][::std::mem::offset_of!(__argv, argv) - 8usize];
};
unsafe extern "C" {
    pub static mut __system_argv: *mut __argv;
}
pub type sec_t = u32;
pub type FN_MEDIUM_STARTUP = ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type FN_MEDIUM_ISINSERTED = ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type FN_MEDIUM_READSECTORS = ::std::option::Option<
    unsafe extern "C" fn(
        sector: sec_t,
        numSectors: sec_t,
        buffer: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
pub type FN_MEDIUM_WRITESECTORS = ::std::option::Option<
    unsafe extern "C" fn(
        sector: sec_t,
        numSectors: sec_t,
        buffer: *const ::std::os::raw::c_void,
    ) -> bool,
>;
pub type FN_MEDIUM_CLEARSTATUS = ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type FN_MEDIUM_SHUTDOWN = ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type FN_MEDIUM_DEVSECTORS = ::std::option::Option<unsafe extern "C" fn() -> s32>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DISC_INTERFACE_STRUCT {
    pub ioType: ::std::os::raw::c_ulong,
    pub features: ::std::os::raw::c_ulong,
    pub startup: FN_MEDIUM_STARTUP,
    pub isInserted: FN_MEDIUM_ISINSERTED,
    pub readSectors: FN_MEDIUM_READSECTORS,
    pub writeSectors: FN_MEDIUM_WRITESECTORS,
    pub clearStatus: FN_MEDIUM_CLEARSTATUS,
    pub shutdown: FN_MEDIUM_SHUTDOWN,
    pub sectors: FN_MEDIUM_DEVSECTORS,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISC_INTERFACE_STRUCT"][::std::mem::size_of::<DISC_INTERFACE_STRUCT>() - 72usize];
    ["Alignment of DISC_INTERFACE_STRUCT"]
        [::std::mem::align_of::<DISC_INTERFACE_STRUCT>() - 8usize];
    ["Offset of field: DISC_INTERFACE_STRUCT::ioType"]
        [::std::mem::offset_of!(DISC_INTERFACE_STRUCT, ioType) - 0usize];
    ["Offset of field: DISC_INTERFACE_STRUCT::features"]
        [::std::mem::offset_of!(DISC_INTERFACE_STRUCT, features) - 8usize];
    ["Offset of field: DISC_INTERFACE_STRUCT::startup"]
        [::std::mem::offset_of!(DISC_INTERFACE_STRUCT, startup) - 16usize];
    ["Offset of field: DISC_INTERFACE_STRUCT::isInserted"]
        [::std::mem::offset_of!(DISC_INTERFACE_STRUCT, isInserted) - 24usize];
    ["Offset of field: DISC_INTERFACE_STRUCT::readSectors"]
        [::std::mem::offset_of!(DISC_INTERFACE_STRUCT, readSectors) - 32usize];
    ["Offset of field: DISC_INTERFACE_STRUCT::writeSectors"]
        [::std::mem::offset_of!(DISC_INTERFACE_STRUCT, writeSectors) - 40usize];
    ["Offset of field: DISC_INTERFACE_STRUCT::clearStatus"]
        [::std::mem::offset_of!(DISC_INTERFACE_STRUCT, clearStatus) - 48usize];
    ["Offset of field: DISC_INTERFACE_STRUCT::shutdown"]
        [::std::mem::offset_of!(DISC_INTERFACE_STRUCT, shutdown) - 56usize];
    ["Offset of field: DISC_INTERFACE_STRUCT::sectors"]
        [::std::mem::offset_of!(DISC_INTERFACE_STRUCT, sectors) - 64usize];
};
pub type DISC_INTERFACE = DISC_INTERFACE_STRUCT;
unsafe extern "C" {
    pub fn register_disc_interface(disc_io: *mut DISC_INTERFACE);
}
unsafe extern "C" {
    pub fn unregister_disc_interface(disc_io: *mut DISC_INTERFACE);
}
