/* automatically generated by rust-bindgen 0.72.1 */

pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const U32_F: &[u8; 2] = b"u\0";
pub const U16_F: &[u8; 3] = b"hu\0";
pub const S32_F: &[u8; 2] = b"d\0";
pub const S16_F: &[u8; 3] = b"hd\0";
pub const X32_F: &[u8; 2] = b"x\0";
pub const X16_F: &[u8; 3] = b"hx\0";
pub const SZT_F: &[u8; 2] = b"u\0";
pub const X8_F: &[u8; 4] = b"02x\0";
pub type u8_t = ::std::os::raw::c_uchar;
pub type s8_t = ::std::os::raw::c_schar;
pub type u16_t = ::std::os::raw::c_ushort;
pub type s16_t = ::std::os::raw::c_short;
pub type u32_t = ::std::os::raw::c_uint;
pub type s32_t = ::std::os::raw::c_int;
pub type u64_t = ::std::os::raw::c_ulong;
pub type s64_t = ::std::os::raw::c_long;
pub type mem_ptr_t = u64_t;
pub type sio_fd_t = *mut ::std::os::raw::c_void;
unsafe extern "C" {
    #[doc = " Opens a serial device for communication.\n\n @param devnum device number\n @return handle to serial device if successful, NULL otherwise"]
    pub fn sio_open(devnum: u8_t) -> sio_fd_t;
}
unsafe extern "C" {
    #[doc = " Sends a single character to the serial device.\n\n @param c character to send\n @param fd serial device handle\n\n @note This function will block until the character can be sent."]
    pub fn sio_send(c: u8_t, fd: sio_fd_t);
}
unsafe extern "C" {
    #[doc = " Receives a single character from the serial device.\n\n @param fd serial device handle\n\n @note This function will block until a character is received."]
    pub fn sio_recv(fd: sio_fd_t) -> u8_t;
}
unsafe extern "C" {
    #[doc = " Reads from the serial device.\n\n @param fd serial device handle\n @param data pointer to data buffer for receiving\n @param len maximum length (in bytes) of data to receive\n @return number of bytes actually received - may be 0 if aborted by sio_read_abort\n\n @note This function will block until data can be received. The blocking\n can be cancelled by calling sio_read_abort()."]
    pub fn sio_read(fd: sio_fd_t, data: *mut u8_t, len: u32_t) -> u32_t;
}
unsafe extern "C" {
    #[doc = " Tries to read from the serial device. Same as sio_read but returns\n immediately if no data is available and never blocks.\n\n @param fd serial device handle\n @param data pointer to data buffer for receiving\n @param len maximum length (in bytes) of data to receive\n @return number of bytes actually received"]
    pub fn sio_tryread(fd: sio_fd_t, data: *mut u8_t, len: u32_t) -> u32_t;
}
unsafe extern "C" {
    #[doc = " Writes to the serial device.\n\n @param fd serial device handle\n @param data pointer to data to send\n @param len length (in bytes) of data to send\n @return number of bytes actually sent\n\n @note This function will block until all data can be sent."]
    pub fn sio_write(fd: sio_fd_t, data: *mut u8_t, len: u32_t) -> u32_t;
}
unsafe extern "C" {
    #[doc = " Aborts a blocking sio_read() call.\n\n @param fd serial device handle"]
    pub fn sio_read_abort(fd: sio_fd_t);
}
