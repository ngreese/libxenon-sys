/* automatically generated by rust-bindgen 0.72.1 */

pub const XEKEY_MANUFACTURING_MODE: u32 = 0;
pub const XEKEY_ALTERNATE_KEY_VAULT: u32 = 1;
pub const XEKEY_RESERVED_BYTE2: u32 = 2;
pub const XEKEY_RESERVED_BYTE3: u32 = 3;
pub const XEKEY_RESERVED_WORD1: u32 = 4;
pub const XEKEY_RESERVED_WORD2: u32 = 5;
pub const XEKEY_RESTRICTED_HVEXT_LOADER: u32 = 6;
pub const XEKEY_RESERVED_DWORD2: u32 = 7;
pub const XEKEY_RESERVED_DWORD3: u32 = 8;
pub const XEKEY_RESERVED_DWORD4: u32 = 9;
pub const XEKEY_RESTRICTED_PRIVILEDGES: u32 = 10;
pub const XEKEY_RESERVED_QWORD2: u32 = 11;
pub const XEKEY_RESERVED_QWORD3: u32 = 12;
pub const XEKEY_RESERVED_QWORD4: u32 = 13;
pub const XEKEY_RESERVED_KEY1: u32 = 14;
pub const XEKEY_RESERVED_KEY2: u32 = 15;
pub const XEKEY_RESERVED_KEY3: u32 = 16;
pub const XEKEY_RESERVED_KEY4: u32 = 17;
pub const XEKEY_RESERVED_RANDOM_KEY1: u32 = 18;
pub const XEKEY_RESERVED_RANDOM_KEY2: u32 = 19;
pub const XEKEY_CONSOLE_SERIAL_NUMBER: u32 = 20;
pub const XEKEY_MOBO_SERIAL_NUMBER: u32 = 21;
pub const XEKEY_GAME_REGION: u32 = 22;
pub const XEKEY_CONSOLE_OBFUSCATION_KEY: u32 = 23;
pub const XEKEY_KEY_OBFUSCATION_KEY: u32 = 24;
pub const XEKEY_ROAMABLE_OBFUSCATION_KEY: u32 = 25;
pub const XEKEY_DVD_KEY: u32 = 26;
pub const XEKEY_PRIMARY_ACTIVATION_KEY: u32 = 27;
pub const XEKEY_SECONDARY_ACTIVATION_KEY: u32 = 28;
pub const XEKEY_GLOBAL_DEVICE_2DES_KEY1: u32 = 29;
pub const XEKEY_GLOBAL_DEVICE_2DES_KEY2: u32 = 30;
pub const XEKEY_WIRELESS_CONTROLLER_MS_2DES_KEY1: u32 = 31;
pub const XEKEY_WIRELESS_CONTROLLER_MS_2DES_KEY2: u32 = 32;
pub const XEKEY_WIRED_WEBCAM_MS_2DES_KEY1: u32 = 33;
pub const XEKEY_WIRED_WEBCAM_MS_2DES_KEY2: u32 = 34;
pub const XEKEY_WIRED_CONTROLLER_MS_2DES_KEY1: u32 = 35;
pub const XEKEY_WIRED_CONTROLLER_MS_2DES_KEY2: u32 = 36;
pub const XEKEY_MEMORY_UNIT_MS_2DES_KEY1: u32 = 37;
pub const XEKEY_MEMORY_UNIT_MS_2DES_KEY2: u32 = 38;
pub const XEKEY_OTHER_XSM3_DEVICE_MS_2DES_KEY1: u32 = 39;
pub const XEKEY_OTHER_XSM3_DEVICE_MS_2DES_KEY2: u32 = 40;
pub const XEKEY_WIRELESS_CONTROLLER_3P_2DES_KEY1: u32 = 41;
pub const XEKEY_WIRELESS_CONTROLLER_3P_2DES_KEY2: u32 = 42;
pub const XEKEY_WIRED_WEBCAM_3P_2DES_KEY1: u32 = 43;
pub const XEKEY_WIRED_WEBCAM_3P_2DES_KEY2: u32 = 44;
pub const XEKEY_WIRED_CONTROLLER_3P_2DES_KEY1: u32 = 45;
pub const XEKEY_WIRED_CONTROLLER_3P_2DES_KEY2: u32 = 46;
pub const XEKEY_MEMORY_UNIT_3P_2DES_KEY1: u32 = 47;
pub const XEKEY_MEMORY_UNIT_3P_2DES_KEY2: u32 = 48;
pub const XEKEY_OTHER_XSM3_DEVICE_3P_2DES_KEY1: u32 = 49;
pub const XEKEY_OTHER_XSM3_DEVICE_3P_2DES_KEY2: u32 = 50;
pub const XEKEY_CONSOLE_PRIVATE_KEY: u32 = 51;
pub const XEKEY_XEIKA_PRIVATE_KEY: u32 = 52;
pub const XEKEY_CARDEA_PRIVATE_KEY: u32 = 53;
pub const XEKEY_CONSOLE_CERTIFICATE: u32 = 54;
pub const XEKEY_XEIKA_CERTIFICATE: u32 = 55;
pub const XEKEY_CARDEA_CERTIFICATE: u32 = 56;
pub const KV_FLASH_PTR: u32 = 108;
pub const VFUSES_SIZE: u32 = 96;
pub const VFUSES_OFFSET: u32 = 610304;
pub const XELL_SIZE: u32 = 262144;
pub const XELL_FOOTER_OFFSET: u32 = 262128;
pub const XELL_FOOTER_LENGTH: u32 = 16;
pub const XELL_FOOTER: &[u8; 17] = b"xxxxxxxxxxxxxxxx\0";
pub const XELL_OFFSET_COUNT: u32 = 6;
pub const REV_XENON: u32 = 0;
pub const REV_ZEPHYR: u32 = 1;
pub const REV_FALCON: u32 = 2;
pub const REV_JASPER: u32 = 3;
pub const REV_TRINITY: u32 = 4;
pub const REV_CORONA: u32 = 5;
pub const REV_CORONA_PHISON: u32 = 6;
pub const REV_WINCHESTER: u32 = 7;
pub const REV_UNKNOWN: i32 = -1;
pub const MMC_FLASH_SIZE: u32 = 50331648;
unsafe extern "C" {
    pub fn xenon_get_kv_size() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn xenon_get_kv_offset() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub static xelloffsets: [::std::os::raw::c_uint; 6usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kventry {
    pub id: ::std::os::raw::c_char,
    pub offset: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kventry"][::std::mem::size_of::<kventry>() - 12usize];
    ["Alignment of kventry"][::std::mem::align_of::<kventry>() - 4usize];
    ["Offset of field: kventry::id"][::std::mem::offset_of!(kventry, id) - 0usize];
    ["Offset of field: kventry::offset"][::std::mem::offset_of!(kventry, offset) - 4usize];
    ["Offset of field: kventry::length"][::std::mem::offset_of!(kventry, length) - 8usize];
};
unsafe extern "C" {
    pub fn print_key(name: *mut ::std::os::raw::c_char, data: *mut ::std::os::raw::c_uchar);
}
unsafe extern "C" {
    pub fn cpu_get_key(data: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn get_virtual_cpukey(data: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn kv_read(
        data: *mut ::std::os::raw::c_uchar,
        virtualcpukey: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn kv_get_dvd_key(dvd_key: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn kv_get_key(
        keyid: ::std::os::raw::c_uchar,
        keybuf: *mut ::std::os::raw::c_uchar,
        keybuflen: *mut ::std::os::raw::c_int,
        keyvault: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn print_cpu_dvd_keys();
}
unsafe extern "C" {
    pub fn updateXeLL(path: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xenon_get_DVE() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn xenon_get_PCIBridgeRevisionID() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn xenon_get_CPU_PVR() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn xenon_get_XenosID() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn xenon_get_console_type() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xenon_get_logical_nand_data(
        buf: *mut ::std::os::raw::c_void,
        offset: ::std::os::raw::c_uint,
        len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xenon_logical_nand_data_ok() -> ::std::os::raw::c_int;
}
