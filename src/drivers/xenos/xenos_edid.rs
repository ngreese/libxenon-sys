/* automatically generated by rust-bindgen 0.72.1 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const NULL: u32 = 0;
pub const LITTLE_ENDIAN: u32 = 3412;
pub const BIG_ENDIAN: u32 = 1234;
pub const BYTE_ORDER: u32 = 1234;
pub const ARGV_MAGIC: u32 = 1600221799;
pub const EDID_LENGTH: u32 = 128;
pub const DDC_ADDR: u32 = 80;
pub const EDID_TIMING_ASPECT_SHIFT: u32 = 6;
pub const EDID_TIMING_ASPECT_MASK: u32 = 192;
pub const EDID_TIMING_VFREQ_SHIFT: u32 = 0;
pub const EDID_TIMING_VFREQ_MASK: u32 = 63;
pub const DRM_EDID_PT_HSYNC_POSITIVE: u32 = 2;
pub const DRM_EDID_PT_VSYNC_POSITIVE: u32 = 4;
pub const DRM_EDID_PT_SEPARATE_SYNC: u32 = 24;
pub const DRM_EDID_PT_STEREO: u32 = 32;
pub const DRM_EDID_PT_INTERLACED: u32 = 128;
pub const EDID_DETAIL_EST_TIMINGS: u32 = 247;
pub const EDID_DETAIL_CVT_3BYTE: u32 = 248;
pub const EDID_DETAIL_COLOR_MGMT_DATA: u32 = 249;
pub const EDID_DETAIL_STD_MODES: u32 = 250;
pub const EDID_DETAIL_MONITOR_CPDATA: u32 = 251;
pub const EDID_DETAIL_MONITOR_NAME: u32 = 252;
pub const EDID_DETAIL_MONITOR_RANGE: u32 = 253;
pub const EDID_DETAIL_MONITOR_STRING: u32 = 254;
pub const EDID_DETAIL_MONITOR_SERIAL: u32 = 255;
pub const DRM_EDID_INPUT_SERRATION_VSYNC: u32 = 1;
pub const DRM_EDID_INPUT_SYNC_ON_GREEN: u32 = 2;
pub const DRM_EDID_INPUT_COMPOSITE_SYNC: u32 = 4;
pub const DRM_EDID_INPUT_SEPARATE_SYNCS: u32 = 8;
pub const DRM_EDID_INPUT_BLANK_TO_BLACK: u32 = 16;
pub const DRM_EDID_INPUT_VIDEO_LEVEL: u32 = 96;
pub const DRM_EDID_INPUT_DIGITAL: u32 = 128;
pub const DRM_EDID_FEATURE_DEFAULT_GTF: u32 = 1;
pub const DRM_EDID_FEATURE_PREFERRED_TIMING: u32 = 2;
pub const DRM_EDID_FEATURE_STANDARD_COLOR: u32 = 4;
pub const DRM_EDID_FEATURE_DISPLAY_TYPE: u32 = 24;
pub const DRM_EDID_FEATURE_PM_ACTIVE_OFF: u32 = 32;
pub const DRM_EDID_FEATURE_PM_SUSPEND: u32 = 64;
pub const DRM_EDID_FEATURE_PM_STANDBY: u32 = 128;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type u8_ = u8;
pub type u16_ = u16;
pub type u32_ = u32;
pub type u64_ = u64;
pub type s8 = i8;
pub type s16 = i16;
pub type s32 = i32;
pub type s64 = i64;
pub type vu8 = u8_;
pub type vu16 = u16_;
pub type vu32 = u32_;
pub type vu64 = u64_;
pub type vs8 = s8;
pub type vs16 = s16;
pub type vs32 = s32;
pub type vs64 = s64;
pub type sfp16 = s16;
pub type sfp32 = s32;
pub type ufp16 = u16_;
pub type ufp32 = u32_;
pub type f32_ = f32;
pub type f64_ = f64;
pub type vf32 = f32;
pub type vf64 = f64;
pub type lba_t = ::std::os::raw::c_ulonglong;
pub type BOOL = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __argv {
    pub magic: ::std::os::raw::c_int,
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __argv"][::std::mem::size_of::<__argv>() - 16usize];
    ["Alignment of __argv"][::std::mem::align_of::<__argv>() - 8usize];
    ["Offset of field: __argv::magic"][::std::mem::offset_of!(__argv, magic) - 0usize];
    ["Offset of field: __argv::argc"][::std::mem::offset_of!(__argv, argc) - 4usize];
    ["Offset of field: __argv::argv"][::std::mem::offset_of!(__argv, argv) - 8usize];
};
unsafe extern "C" {
    pub static mut __system_argv: *mut __argv;
}
pub type __le16 = ::std::os::raw::c_ushort;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct est_timings {
    pub t1: u8_,
    pub t2: u8_,
    pub mfg_rsvd: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of est_timings"][::std::mem::size_of::<est_timings>() - 3usize];
    ["Alignment of est_timings"][::std::mem::align_of::<est_timings>() - 1usize];
    ["Offset of field: est_timings::t1"][::std::mem::offset_of!(est_timings, t1) - 0usize];
    ["Offset of field: est_timings::t2"][::std::mem::offset_of!(est_timings, t2) - 1usize];
    ["Offset of field: est_timings::mfg_rsvd"]
        [::std::mem::offset_of!(est_timings, mfg_rsvd) - 2usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct std_timing {
    pub hsize: u8_,
    pub vfreq_aspect: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_timing"][::std::mem::size_of::<std_timing>() - 2usize];
    ["Alignment of std_timing"][::std::mem::align_of::<std_timing>() - 1usize];
    ["Offset of field: std_timing::hsize"][::std::mem::offset_of!(std_timing, hsize) - 0usize];
    ["Offset of field: std_timing::vfreq_aspect"]
        [::std::mem::offset_of!(std_timing, vfreq_aspect) - 1usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct detailed_pixel_timing {
    pub hactive_lo: u8_,
    pub hblank_lo: u8_,
    pub hactive_hblank_hi: u8_,
    pub vactive_lo: u8_,
    pub vblank_lo: u8_,
    pub vactive_vblank_hi: u8_,
    pub hsync_offset_lo: u8_,
    pub hsync_pulse_width_lo: u8_,
    pub vsync_offset_pulse_width_lo: u8_,
    pub hsync_vsync_offset_pulse_width_hi: u8_,
    pub width_mm_lo: u8_,
    pub height_mm_lo: u8_,
    pub width_height_mm_hi: u8_,
    pub hborder: u8_,
    pub vborder: u8_,
    pub misc: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of detailed_pixel_timing"][::std::mem::size_of::<detailed_pixel_timing>() - 16usize];
    ["Alignment of detailed_pixel_timing"]
        [::std::mem::align_of::<detailed_pixel_timing>() - 1usize];
    ["Offset of field: detailed_pixel_timing::hactive_lo"]
        [::std::mem::offset_of!(detailed_pixel_timing, hactive_lo) - 0usize];
    ["Offset of field: detailed_pixel_timing::hblank_lo"]
        [::std::mem::offset_of!(detailed_pixel_timing, hblank_lo) - 1usize];
    ["Offset of field: detailed_pixel_timing::hactive_hblank_hi"]
        [::std::mem::offset_of!(detailed_pixel_timing, hactive_hblank_hi) - 2usize];
    ["Offset of field: detailed_pixel_timing::vactive_lo"]
        [::std::mem::offset_of!(detailed_pixel_timing, vactive_lo) - 3usize];
    ["Offset of field: detailed_pixel_timing::vblank_lo"]
        [::std::mem::offset_of!(detailed_pixel_timing, vblank_lo) - 4usize];
    ["Offset of field: detailed_pixel_timing::vactive_vblank_hi"]
        [::std::mem::offset_of!(detailed_pixel_timing, vactive_vblank_hi) - 5usize];
    ["Offset of field: detailed_pixel_timing::hsync_offset_lo"]
        [::std::mem::offset_of!(detailed_pixel_timing, hsync_offset_lo) - 6usize];
    ["Offset of field: detailed_pixel_timing::hsync_pulse_width_lo"]
        [::std::mem::offset_of!(detailed_pixel_timing, hsync_pulse_width_lo) - 7usize];
    ["Offset of field: detailed_pixel_timing::vsync_offset_pulse_width_lo"]
        [::std::mem::offset_of!(detailed_pixel_timing, vsync_offset_pulse_width_lo) - 8usize];
    ["Offset of field: detailed_pixel_timing::hsync_vsync_offset_pulse_width_hi"]
        [::std::mem::offset_of!(detailed_pixel_timing, hsync_vsync_offset_pulse_width_hi) - 9usize];
    ["Offset of field: detailed_pixel_timing::width_mm_lo"]
        [::std::mem::offset_of!(detailed_pixel_timing, width_mm_lo) - 10usize];
    ["Offset of field: detailed_pixel_timing::height_mm_lo"]
        [::std::mem::offset_of!(detailed_pixel_timing, height_mm_lo) - 11usize];
    ["Offset of field: detailed_pixel_timing::width_height_mm_hi"]
        [::std::mem::offset_of!(detailed_pixel_timing, width_height_mm_hi) - 12usize];
    ["Offset of field: detailed_pixel_timing::hborder"]
        [::std::mem::offset_of!(detailed_pixel_timing, hborder) - 13usize];
    ["Offset of field: detailed_pixel_timing::vborder"]
        [::std::mem::offset_of!(detailed_pixel_timing, vborder) - 14usize];
    ["Offset of field: detailed_pixel_timing::misc"]
        [::std::mem::offset_of!(detailed_pixel_timing, misc) - 15usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct detailed_data_string {
    pub str_: [u8_; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of detailed_data_string"][::std::mem::size_of::<detailed_data_string>() - 13usize];
    ["Alignment of detailed_data_string"][::std::mem::align_of::<detailed_data_string>() - 1usize];
    ["Offset of field: detailed_data_string::str_"]
        [::std::mem::offset_of!(detailed_data_string, str_) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct detailed_data_monitor_range {
    pub min_vfreq: u8_,
    pub max_vfreq: u8_,
    pub min_hfreq_khz: u8_,
    pub max_hfreq_khz: u8_,
    pub pixel_clock_mhz: u8_,
    pub sec_gtf_toggle: __le16,
    pub hfreq_start_khz: u8_,
    pub c: u8_,
    pub m: __le16,
    pub k: u8_,
    pub j: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of detailed_data_monitor_range"]
        [::std::mem::size_of::<detailed_data_monitor_range>() - 13usize];
    ["Alignment of detailed_data_monitor_range"]
        [::std::mem::align_of::<detailed_data_monitor_range>() - 1usize];
    ["Offset of field: detailed_data_monitor_range::min_vfreq"]
        [::std::mem::offset_of!(detailed_data_monitor_range, min_vfreq) - 0usize];
    ["Offset of field: detailed_data_monitor_range::max_vfreq"]
        [::std::mem::offset_of!(detailed_data_monitor_range, max_vfreq) - 1usize];
    ["Offset of field: detailed_data_monitor_range::min_hfreq_khz"]
        [::std::mem::offset_of!(detailed_data_monitor_range, min_hfreq_khz) - 2usize];
    ["Offset of field: detailed_data_monitor_range::max_hfreq_khz"]
        [::std::mem::offset_of!(detailed_data_monitor_range, max_hfreq_khz) - 3usize];
    ["Offset of field: detailed_data_monitor_range::pixel_clock_mhz"]
        [::std::mem::offset_of!(detailed_data_monitor_range, pixel_clock_mhz) - 4usize];
    ["Offset of field: detailed_data_monitor_range::sec_gtf_toggle"]
        [::std::mem::offset_of!(detailed_data_monitor_range, sec_gtf_toggle) - 5usize];
    ["Offset of field: detailed_data_monitor_range::hfreq_start_khz"]
        [::std::mem::offset_of!(detailed_data_monitor_range, hfreq_start_khz) - 7usize];
    ["Offset of field: detailed_data_monitor_range::c"]
        [::std::mem::offset_of!(detailed_data_monitor_range, c) - 8usize];
    ["Offset of field: detailed_data_monitor_range::m"]
        [::std::mem::offset_of!(detailed_data_monitor_range, m) - 9usize];
    ["Offset of field: detailed_data_monitor_range::k"]
        [::std::mem::offset_of!(detailed_data_monitor_range, k) - 11usize];
    ["Offset of field: detailed_data_monitor_range::j"]
        [::std::mem::offset_of!(detailed_data_monitor_range, j) - 12usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct detailed_data_wpindex {
    pub white_yx_lo: u8_,
    pub white_x_hi: u8_,
    pub white_y_hi: u8_,
    pub gamma: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of detailed_data_wpindex"][::std::mem::size_of::<detailed_data_wpindex>() - 4usize];
    ["Alignment of detailed_data_wpindex"]
        [::std::mem::align_of::<detailed_data_wpindex>() - 1usize];
    ["Offset of field: detailed_data_wpindex::white_yx_lo"]
        [::std::mem::offset_of!(detailed_data_wpindex, white_yx_lo) - 0usize];
    ["Offset of field: detailed_data_wpindex::white_x_hi"]
        [::std::mem::offset_of!(detailed_data_wpindex, white_x_hi) - 1usize];
    ["Offset of field: detailed_data_wpindex::white_y_hi"]
        [::std::mem::offset_of!(detailed_data_wpindex, white_y_hi) - 2usize];
    ["Offset of field: detailed_data_wpindex::gamma"]
        [::std::mem::offset_of!(detailed_data_wpindex, gamma) - 3usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct detailed_data_color_point {
    pub windex1: u8_,
    pub wpindex1: [u8_; 3usize],
    pub windex2: u8_,
    pub wpindex2: [u8_; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of detailed_data_color_point"]
        [::std::mem::size_of::<detailed_data_color_point>() - 8usize];
    ["Alignment of detailed_data_color_point"]
        [::std::mem::align_of::<detailed_data_color_point>() - 1usize];
    ["Offset of field: detailed_data_color_point::windex1"]
        [::std::mem::offset_of!(detailed_data_color_point, windex1) - 0usize];
    ["Offset of field: detailed_data_color_point::wpindex1"]
        [::std::mem::offset_of!(detailed_data_color_point, wpindex1) - 1usize];
    ["Offset of field: detailed_data_color_point::windex2"]
        [::std::mem::offset_of!(detailed_data_color_point, windex2) - 4usize];
    ["Offset of field: detailed_data_color_point::wpindex2"]
        [::std::mem::offset_of!(detailed_data_color_point, wpindex2) - 5usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cvt_timing {
    pub code: [u8_; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cvt_timing"][::std::mem::size_of::<cvt_timing>() - 3usize];
    ["Alignment of cvt_timing"][::std::mem::align_of::<cvt_timing>() - 1usize];
    ["Offset of field: cvt_timing::code"][::std::mem::offset_of!(cvt_timing, code) - 0usize];
};
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct detailed_non_pixel {
    pub pad1: u8_,
    pub type_: u8_,
    pub pad2: u8_,
    pub data: detailed_non_pixel__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union detailed_non_pixel__bindgen_ty_1 {
    pub str_: detailed_data_string,
    pub range: detailed_data_monitor_range,
    pub color: detailed_data_wpindex,
    pub timings: [std_timing; 5usize],
    pub cvt: [cvt_timing; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of detailed_non_pixel__bindgen_ty_1"]
        [::std::mem::size_of::<detailed_non_pixel__bindgen_ty_1>() - 13usize];
    ["Alignment of detailed_non_pixel__bindgen_ty_1"]
        [::std::mem::align_of::<detailed_non_pixel__bindgen_ty_1>() - 1usize];
    ["Offset of field: detailed_non_pixel__bindgen_ty_1::str_"]
        [::std::mem::offset_of!(detailed_non_pixel__bindgen_ty_1, str_) - 0usize];
    ["Offset of field: detailed_non_pixel__bindgen_ty_1::range"]
        [::std::mem::offset_of!(detailed_non_pixel__bindgen_ty_1, range) - 0usize];
    ["Offset of field: detailed_non_pixel__bindgen_ty_1::color"]
        [::std::mem::offset_of!(detailed_non_pixel__bindgen_ty_1, color) - 0usize];
    ["Offset of field: detailed_non_pixel__bindgen_ty_1::timings"]
        [::std::mem::offset_of!(detailed_non_pixel__bindgen_ty_1, timings) - 0usize];
    ["Offset of field: detailed_non_pixel__bindgen_ty_1::cvt"]
        [::std::mem::offset_of!(detailed_non_pixel__bindgen_ty_1, cvt) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of detailed_non_pixel"][::std::mem::size_of::<detailed_non_pixel>() - 16usize];
    ["Alignment of detailed_non_pixel"][::std::mem::align_of::<detailed_non_pixel>() - 1usize];
    ["Offset of field: detailed_non_pixel::pad1"]
        [::std::mem::offset_of!(detailed_non_pixel, pad1) - 0usize];
    ["Offset of field: detailed_non_pixel::type_"]
        [::std::mem::offset_of!(detailed_non_pixel, type_) - 1usize];
    ["Offset of field: detailed_non_pixel::pad2"]
        [::std::mem::offset_of!(detailed_non_pixel, pad2) - 2usize];
    ["Offset of field: detailed_non_pixel::data"]
        [::std::mem::offset_of!(detailed_non_pixel, data) - 3usize];
};
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct detailed_timing {
    pub pixel_clock: __le16,
    pub data: detailed_timing__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union detailed_timing__bindgen_ty_1 {
    pub pixel_data: detailed_pixel_timing,
    pub other_data: detailed_non_pixel,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of detailed_timing__bindgen_ty_1"]
        [::std::mem::size_of::<detailed_timing__bindgen_ty_1>() - 16usize];
    ["Alignment of detailed_timing__bindgen_ty_1"]
        [::std::mem::align_of::<detailed_timing__bindgen_ty_1>() - 1usize];
    ["Offset of field: detailed_timing__bindgen_ty_1::pixel_data"]
        [::std::mem::offset_of!(detailed_timing__bindgen_ty_1, pixel_data) - 0usize];
    ["Offset of field: detailed_timing__bindgen_ty_1::other_data"]
        [::std::mem::offset_of!(detailed_timing__bindgen_ty_1, other_data) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of detailed_timing"][::std::mem::size_of::<detailed_timing>() - 18usize];
    ["Alignment of detailed_timing"][::std::mem::align_of::<detailed_timing>() - 1usize];
    ["Offset of field: detailed_timing::pixel_clock"]
        [::std::mem::offset_of!(detailed_timing, pixel_clock) - 0usize];
    ["Offset of field: detailed_timing::data"]
        [::std::mem::offset_of!(detailed_timing, data) - 2usize];
};
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct edid {
    pub header: [u8_; 8usize],
    pub mfg_id: [u8_; 2usize],
    pub prod_code: [u8_; 2usize],
    pub serial: u32_,
    pub mfg_week: u8_,
    pub mfg_year: u8_,
    pub version: u8_,
    pub revision: u8_,
    pub input: u8_,
    pub width_cm: u8_,
    pub height_cm: u8_,
    pub gamma: u8_,
    pub features: u8_,
    pub red_green_lo: u8_,
    pub black_white_lo: u8_,
    pub red_x: u8_,
    pub red_y: u8_,
    pub green_x: u8_,
    pub green_y: u8_,
    pub blue_x: u8_,
    pub blue_y: u8_,
    pub white_x: u8_,
    pub white_y: u8_,
    pub established_timings: est_timings,
    pub standard_timings: [std_timing; 8usize],
    pub detailed_timings: [detailed_timing; 4usize],
    pub extensions: u8_,
    pub checksum: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of edid"][::std::mem::size_of::<edid>() - 128usize];
    ["Alignment of edid"][::std::mem::align_of::<edid>() - 1usize];
    ["Offset of field: edid::header"][::std::mem::offset_of!(edid, header) - 0usize];
    ["Offset of field: edid::mfg_id"][::std::mem::offset_of!(edid, mfg_id) - 8usize];
    ["Offset of field: edid::prod_code"][::std::mem::offset_of!(edid, prod_code) - 10usize];
    ["Offset of field: edid::serial"][::std::mem::offset_of!(edid, serial) - 12usize];
    ["Offset of field: edid::mfg_week"][::std::mem::offset_of!(edid, mfg_week) - 16usize];
    ["Offset of field: edid::mfg_year"][::std::mem::offset_of!(edid, mfg_year) - 17usize];
    ["Offset of field: edid::version"][::std::mem::offset_of!(edid, version) - 18usize];
    ["Offset of field: edid::revision"][::std::mem::offset_of!(edid, revision) - 19usize];
    ["Offset of field: edid::input"][::std::mem::offset_of!(edid, input) - 20usize];
    ["Offset of field: edid::width_cm"][::std::mem::offset_of!(edid, width_cm) - 21usize];
    ["Offset of field: edid::height_cm"][::std::mem::offset_of!(edid, height_cm) - 22usize];
    ["Offset of field: edid::gamma"][::std::mem::offset_of!(edid, gamma) - 23usize];
    ["Offset of field: edid::features"][::std::mem::offset_of!(edid, features) - 24usize];
    ["Offset of field: edid::red_green_lo"][::std::mem::offset_of!(edid, red_green_lo) - 25usize];
    ["Offset of field: edid::black_white_lo"]
        [::std::mem::offset_of!(edid, black_white_lo) - 26usize];
    ["Offset of field: edid::red_x"][::std::mem::offset_of!(edid, red_x) - 27usize];
    ["Offset of field: edid::red_y"][::std::mem::offset_of!(edid, red_y) - 28usize];
    ["Offset of field: edid::green_x"][::std::mem::offset_of!(edid, green_x) - 29usize];
    ["Offset of field: edid::green_y"][::std::mem::offset_of!(edid, green_y) - 30usize];
    ["Offset of field: edid::blue_x"][::std::mem::offset_of!(edid, blue_x) - 31usize];
    ["Offset of field: edid::blue_y"][::std::mem::offset_of!(edid, blue_y) - 32usize];
    ["Offset of field: edid::white_x"][::std::mem::offset_of!(edid, white_x) - 33usize];
    ["Offset of field: edid::white_y"][::std::mem::offset_of!(edid, white_y) - 34usize];
    ["Offset of field: edid::established_timings"]
        [::std::mem::offset_of!(edid, established_timings) - 35usize];
    ["Offset of field: edid::standard_timings"]
        [::std::mem::offset_of!(edid, standard_timings) - 38usize];
    ["Offset of field: edid::detailed_timings"]
        [::std::mem::offset_of!(edid, detailed_timings) - 54usize];
    ["Offset of field: edid::extensions"][::std::mem::offset_of!(edid, extensions) - 126usize];
    ["Offset of field: edid::checksum"][::std::mem::offset_of!(edid, checksum) - 127usize];
};
unsafe extern "C" {
    pub fn xenos_get_edid() -> *mut edid;
}
unsafe extern "C" {
    pub fn xenos_detect_hdmi_monitor(edid: *mut edid) -> BOOL;
}
