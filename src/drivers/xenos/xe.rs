/* automatically generated by rust-bindgen 0.72.1 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const NULL: u32 = 0;
pub const LITTLE_ENDIAN: u32 = 3412;
pub const BIG_ENDIAN: u32 = 1234;
pub const BYTE_ORDER: u32 = 1234;
pub const ARGV_MAGIC: u32 = 1600221799;
pub const XE_MAX_INDICES_PER_DRAW: u32 = 65535;
pub const SHADER_TYPE_PIXEL: u32 = 1;
pub const SHADER_TYPE_VERTEX: u32 = 0;
pub const XE_PRIMTYPE_POINTLIST: u32 = 1;
pub const XE_PRIMTYPE_LINELIST: u32 = 2;
pub const XE_PRIMTYPE_LINESTRIP: u32 = 3;
pub const XE_PRIMTYPE_TRIANGLELIST: u32 = 4;
pub const XE_PRIMTYPE_TRIANGLEFAN: u32 = 5;
pub const XE_PRIMTYPE_TRIANGLESTRIP: u32 = 6;
pub const XE_PRIMTYPE_RECTLIST: u32 = 8;
pub const XE_PRIMTYPE_QUADLIST: u32 = 13;
pub const XE_CMP_NEVER: u32 = 0;
pub const XE_CMP_LESS: u32 = 1;
pub const XE_CMP_EQUAL: u32 = 2;
pub const XE_CMP_LESSEQUAL: u32 = 3;
pub const XE_CMP_GREATER: u32 = 4;
pub const XE_CMP_NOTEQUAL: u32 = 5;
pub const XE_CMP_GREATEREQUAL: u32 = 6;
pub const XE_CMP_ALWAYS: u32 = 7;
pub const XE_BLEND_ZERO: u32 = 0;
pub const XE_BLEND_ONE: u32 = 1;
pub const XE_BLEND_SRCCOLOR: u32 = 4;
pub const XE_BLEND_INVSRCCOLOR: u32 = 5;
pub const XE_BLEND_SRCALPHA: u32 = 6;
pub const XE_BLEND_INVSRCALPHA: u32 = 7;
pub const XE_BLEND_DESTCOLOR: u32 = 8;
pub const XE_BLEND_INVDESTCOLOR: u32 = 9;
pub const XE_BLEND_DESTALPHA: u32 = 10;
pub const XE_BLEND_INVDESTALPHA: u32 = 11;
pub const XE_BLEND_BLENDFACTOR: u32 = 12;
pub const XE_BLEND_INVBLENDFACTOR: u32 = 13;
pub const XE_BLEND_CONSTANTALPHA: u32 = 14;
pub const XE_BLEND_INVCONSTANTALPHA: u32 = 15;
pub const XE_BLEND_SRCALPHASAT: u32 = 16;
pub const XE_CULL_NONE: u32 = 0;
pub const XE_CULL_CW: u32 = 2;
pub const XE_CULL_CCW: u32 = 6;
pub const XE_BLENDOP_ADD: u32 = 0;
pub const XE_BLENDOP_SUBTRACT: u32 = 1;
pub const XE_BLENDOP_REVSUBTRACT: u32 = 4;
pub const XE_BLENDOP_MIN: u32 = 2;
pub const XE_BLENDOP_MAX: u32 = 3;
pub const XE_STENCILOP_KEEP: u32 = 0;
pub const XE_STENCILOP_ZERO: u32 = 1;
pub const XE_STENCILOP_REPLACE: u32 = 2;
pub const XE_STENCILOP_INCRSAT: u32 = 3;
pub const XE_STENCILOP_DECRSAT: u32 = 4;
pub const XE_STENCILOP_INVERT: u32 = 5;
pub const XE_STENCILOP_INCR: u32 = 6;
pub const XE_STENCILOP_DECR: u32 = 7;
pub const XE_TEXADDR_WRAP: u32 = 0;
pub const XE_TEXADDR_MIRROR: u32 = 1;
pub const XE_TEXADDR_CLAMP: u32 = 2;
pub const XE_TEXADDR_MIRRORONCE: u32 = 3;
pub const XE_TEXADDR_BORDER_HALF: u32 = 4;
pub const XE_TEXADDR_MIRRORONCE_BORDER_HALF: u32 = 5;
pub const XE_TEXADDR_BORDER: u32 = 6;
pub const XE_TEXADDR_MIRRORONCE_BORDER: u32 = 7;
pub const XE_CLIP_ENABLE_PLANE0: u32 = 1;
pub const XE_CLIP_ENABLE_PLANE1: u32 = 2;
pub const XE_CLIP_ENABLE_PLANE2: u32 = 4;
pub const XE_CLIP_ENABLE_PLANE3: u32 = 8;
pub const XE_CLIP_ENABLE_PLANE4: u32 = 16;
pub const XE_CLIP_ENABLE_PLANE5: u32 = 32;
pub const XE_CLIP_MASTER_DISABLE: u32 = 65536;
pub const XE_FILL_POINT: u32 = 1;
pub const XE_FILL_WIREFRAME: u32 = 37;
pub const XE_FILL_SOLID: u32 = 0;
pub const XE_SHADER_MAX_INSTANCES: u32 = 16;
pub const SWIZZLE_XYZW: u32 = 1672;
pub const SWIZZLE_XYZ1: u32 = 2696;
pub const SWIZZLE_XY01: u32 = 2568;
pub const SWIZZLE_XY__: u32 = 4040;
pub const SWIZZLE_XYZ_: u32 = 3784;
pub const SWIZZLE_XYZ0: u32 = 200;
pub const SWIZZLE_XY0_: u32 = 3592;
pub const XE_TYPE_FLOAT2: u32 = 37;
pub const XE_TYPE_FLOAT3: u32 = 57;
pub const XE_TYPE_FLOAT4: u32 = 38;
pub const XE_TYPE_UBYTE4: u32 = 6;
pub const XE_USAGE_POSITION: u32 = 0;
pub const XE_USAGE_BLENDWEIGHTS: u32 = 1;
pub const XE_USAGE_BLENDINDICES: u32 = 2;
pub const XE_USAGE_NORMAL: u32 = 3;
pub const XE_USAGE_PSIZE: u32 = 4;
pub const XE_USAGE_TEXCOORD: u32 = 5;
pub const XE_USAGE_TANGENT: u32 = 6;
pub const XE_USAGE_BINORMAL: u32 = 7;
pub const XE_USAGE_TESSFACTOR: u32 = 8;
pub const XE_USAGE_POSITIONT: u32 = 9;
pub const XE_USAGE_COLOR: u32 = 10;
pub const XE_USAGE_FOG: u32 = 11;
pub const XE_USAGE_DEPTH: u32 = 12;
pub const XE_USAGE_SAMPLE: u32 = 13;
pub const XE_FMT_MASK: u32 = 63;
pub const XE_FMT_8: u32 = 2;
pub const XE_FMT_8888: u32 = 6;
pub const XE_FMT_5551: u32 = 3;
pub const XE_FMT_565: u32 = 4;
pub const XE_FMT_16161616: u32 = 26;
pub const XE_FMT_ARGB: u32 = 128;
pub const XE_FMT_BGRA: u32 = 0;
pub const XE_FMT_16BE: u32 = 64;
pub const XE_FMT_INDEX16: u32 = 0;
pub const XE_FMT_INDEX32: u32 = 1;
pub const DIRTY_ALU: u32 = 1;
pub const DIRTY_FETCH: u32 = 2;
pub const DIRTY_CLIP: u32 = 4;
pub const DIRTY_INTEGER: u32 = 8;
pub const DIRTY_CONTROL: u32 = 16;
pub const DIRTY_SHADER: u32 = 32;
pub const DIRTY_MISC: u32 = 64;
pub const XE_SOURCE_COLOR: u32 = 0;
pub const XE_SOURCE_DS: u32 = 4;
pub const XE_CLEAR_COLOR: u32 = 1;
pub const XE_CLEAR_DS: u32 = 2;
pub const XE_LOCK_READ: u32 = 1;
pub const XE_LOCK_WRITE: u32 = 2;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type u8_ = u8;
pub type u16_ = u16;
pub type u32_ = u32;
pub type u64_ = u64;
pub type s8 = i8;
pub type s16 = i16;
pub type s32 = i32;
pub type s64 = i64;
pub type vu8 = u8_;
pub type vu16 = u16_;
pub type vu32 = u32_;
pub type vu64 = u64_;
pub type vs8 = s8;
pub type vs16 = s16;
pub type vs32 = s32;
pub type vs64 = s64;
pub type sfp16 = s16;
pub type sfp32 = s32;
pub type ufp16 = u16_;
pub type ufp32 = u32_;
pub type f32_ = f32;
pub type f64_ = f64;
pub type vf32 = f32;
pub type vf64 = f64;
pub type lba_t = ::std::os::raw::c_ulonglong;
pub type BOOL = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __argv {
    pub magic: ::std::os::raw::c_int,
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __argv"][::std::mem::size_of::<__argv>() - 16usize];
    ["Alignment of __argv"][::std::mem::align_of::<__argv>() - 8usize];
    ["Offset of field: __argv::magic"][::std::mem::offset_of!(__argv, magic) - 0usize];
    ["Offset of field: __argv::argc"][::std::mem::offset_of!(__argv, argc) - 4usize];
    ["Offset of field: __argv::argv"][::std::mem::offset_of!(__argv, argv) - 8usize];
};
unsafe extern "C" {
    pub static mut __system_argv: *mut __argv;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XenosLock {
    pub start: *mut ::std::os::raw::c_void,
    pub phys: u32_,
    pub size: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XenosLock"][::std::mem::size_of::<XenosLock>() - 24usize];
    ["Alignment of XenosLock"][::std::mem::align_of::<XenosLock>() - 8usize];
    ["Offset of field: XenosLock::start"][::std::mem::offset_of!(XenosLock, start) - 0usize];
    ["Offset of field: XenosLock::phys"][::std::mem::offset_of!(XenosLock, phys) - 8usize];
    ["Offset of field: XenosLock::size"][::std::mem::offset_of!(XenosLock, size) - 12usize];
    ["Offset of field: XenosLock::flags"][::std::mem::offset_of!(XenosLock, flags) - 16usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XenosShader {
    pub shader: *mut ::std::os::raw::c_void,
    pub size: u32_,
    pub shader_phys: [u32_; 16usize],
    pub shader_phys_size: u32_,
    pub program_control: u32_,
    pub context_misc: u32_,
    pub shader_instance: [*mut ::std::os::raw::c_void; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XenosShader"][::std::mem::size_of::<XenosShader>() - 216usize];
    ["Alignment of XenosShader"][::std::mem::align_of::<XenosShader>() - 1usize];
    ["Offset of field: XenosShader::shader"][::std::mem::offset_of!(XenosShader, shader) - 0usize];
    ["Offset of field: XenosShader::size"][::std::mem::offset_of!(XenosShader, size) - 8usize];
    ["Offset of field: XenosShader::shader_phys"]
        [::std::mem::offset_of!(XenosShader, shader_phys) - 12usize];
    ["Offset of field: XenosShader::shader_phys_size"]
        [::std::mem::offset_of!(XenosShader, shader_phys_size) - 76usize];
    ["Offset of field: XenosShader::program_control"]
        [::std::mem::offset_of!(XenosShader, program_control) - 80usize];
    ["Offset of field: XenosShader::context_misc"]
        [::std::mem::offset_of!(XenosShader, context_misc) - 84usize];
    ["Offset of field: XenosShader::shader_instance"]
        [::std::mem::offset_of!(XenosShader, shader_instance) - 88usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XenosShaderHeader {
    pub magic: u32_,
    pub offset: u32_,
    pub unk1: [u32_; 3usize],
    pub off_constants: u32_,
    pub off_shader: u32_,
    pub unk2: [u32_; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XenosShaderHeader"][::std::mem::size_of::<XenosShaderHeader>() - 36usize];
    ["Alignment of XenosShaderHeader"][::std::mem::align_of::<XenosShaderHeader>() - 1usize];
    ["Offset of field: XenosShaderHeader::magic"]
        [::std::mem::offset_of!(XenosShaderHeader, magic) - 0usize];
    ["Offset of field: XenosShaderHeader::offset"]
        [::std::mem::offset_of!(XenosShaderHeader, offset) - 4usize];
    ["Offset of field: XenosShaderHeader::unk1"]
        [::std::mem::offset_of!(XenosShaderHeader, unk1) - 8usize];
    ["Offset of field: XenosShaderHeader::off_constants"]
        [::std::mem::offset_of!(XenosShaderHeader, off_constants) - 20usize];
    ["Offset of field: XenosShaderHeader::off_shader"]
        [::std::mem::offset_of!(XenosShaderHeader, off_shader) - 24usize];
    ["Offset of field: XenosShaderHeader::unk2"]
        [::std::mem::offset_of!(XenosShaderHeader, unk2) - 28usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XenosShaderData {
    pub sh_off: u32_,
    pub sh_size: u32_,
    pub program_control: u32_,
    pub context_misc: u32_,
    pub unk1: [u32_; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XenosShaderData"][::std::mem::size_of::<XenosShaderData>() - 32usize];
    ["Alignment of XenosShaderData"][::std::mem::align_of::<XenosShaderData>() - 1usize];
    ["Offset of field: XenosShaderData::sh_off"]
        [::std::mem::offset_of!(XenosShaderData, sh_off) - 0usize];
    ["Offset of field: XenosShaderData::sh_size"]
        [::std::mem::offset_of!(XenosShaderData, sh_size) - 4usize];
    ["Offset of field: XenosShaderData::program_control"]
        [::std::mem::offset_of!(XenosShaderData, program_control) - 8usize];
    ["Offset of field: XenosShaderData::context_misc"]
        [::std::mem::offset_of!(XenosShaderData, context_misc) - 12usize];
    ["Offset of field: XenosShaderData::unk1"]
        [::std::mem::offset_of!(XenosShaderData, unk1) - 16usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct XenosShaderVertex {
    pub cnt0: u32_,
    pub cnt_vfetch: u32_,
    pub cnt2: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XenosShaderVertex"][::std::mem::size_of::<XenosShaderVertex>() - 12usize];
    ["Alignment of XenosShaderVertex"][::std::mem::align_of::<XenosShaderVertex>() - 1usize];
    ["Offset of field: XenosShaderVertex::cnt0"]
        [::std::mem::offset_of!(XenosShaderVertex, cnt0) - 0usize];
    ["Offset of field: XenosShaderVertex::cnt_vfetch"]
        [::std::mem::offset_of!(XenosShaderVertex, cnt_vfetch) - 4usize];
    ["Offset of field: XenosShaderVertex::cnt2"]
        [::std::mem::offset_of!(XenosShaderVertex, cnt2) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XenosVBFElement {
    pub usage: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
    pub fmt: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XenosVBFElement"][::std::mem::size_of::<XenosVBFElement>() - 12usize];
    ["Alignment of XenosVBFElement"][::std::mem::align_of::<XenosVBFElement>() - 4usize];
    ["Offset of field: XenosVBFElement::usage"]
        [::std::mem::offset_of!(XenosVBFElement, usage) - 0usize];
    ["Offset of field: XenosVBFElement::index"]
        [::std::mem::offset_of!(XenosVBFElement, index) - 4usize];
    ["Offset of field: XenosVBFElement::fmt"]
        [::std::mem::offset_of!(XenosVBFElement, fmt) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XenosVBFFormat {
    pub num: ::std::os::raw::c_int,
    pub e: [XenosVBFElement; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XenosVBFFormat"][::std::mem::size_of::<XenosVBFFormat>() - 124usize];
    ["Alignment of XenosVBFFormat"][::std::mem::align_of::<XenosVBFFormat>() - 4usize];
    ["Offset of field: XenosVBFFormat::num"][::std::mem::offset_of!(XenosVBFFormat, num) - 0usize];
    ["Offset of field: XenosVBFFormat::e"][::std::mem::offset_of!(XenosVBFFormat, e) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XenosSurface {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub wpitch: ::std::os::raw::c_int,
    pub hpitch: ::std::os::raw::c_int,
    pub tiled: ::std::os::raw::c_int,
    pub format: ::std::os::raw::c_int,
    pub ptr: u32_,
    pub ptr_mip: u32_,
    pub bypp: ::std::os::raw::c_int,
    pub use_filtering: ::std::os::raw::c_int,
    pub u_addressing: ::std::os::raw::c_int,
    pub v_addressing: ::std::os::raw::c_int,
    pub base: *mut ::std::os::raw::c_void,
    pub lock: XenosLock,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XenosSurface"][::std::mem::size_of::<XenosSurface>() - 80usize];
    ["Alignment of XenosSurface"][::std::mem::align_of::<XenosSurface>() - 8usize];
    ["Offset of field: XenosSurface::width"][::std::mem::offset_of!(XenosSurface, width) - 0usize];
    ["Offset of field: XenosSurface::height"]
        [::std::mem::offset_of!(XenosSurface, height) - 4usize];
    ["Offset of field: XenosSurface::wpitch"]
        [::std::mem::offset_of!(XenosSurface, wpitch) - 8usize];
    ["Offset of field: XenosSurface::hpitch"]
        [::std::mem::offset_of!(XenosSurface, hpitch) - 12usize];
    ["Offset of field: XenosSurface::tiled"][::std::mem::offset_of!(XenosSurface, tiled) - 16usize];
    ["Offset of field: XenosSurface::format"]
        [::std::mem::offset_of!(XenosSurface, format) - 20usize];
    ["Offset of field: XenosSurface::ptr"][::std::mem::offset_of!(XenosSurface, ptr) - 24usize];
    ["Offset of field: XenosSurface::ptr_mip"]
        [::std::mem::offset_of!(XenosSurface, ptr_mip) - 28usize];
    ["Offset of field: XenosSurface::bypp"][::std::mem::offset_of!(XenosSurface, bypp) - 32usize];
    ["Offset of field: XenosSurface::use_filtering"]
        [::std::mem::offset_of!(XenosSurface, use_filtering) - 36usize];
    ["Offset of field: XenosSurface::u_addressing"]
        [::std::mem::offset_of!(XenosSurface, u_addressing) - 40usize];
    ["Offset of field: XenosSurface::v_addressing"]
        [::std::mem::offset_of!(XenosSurface, v_addressing) - 44usize];
    ["Offset of field: XenosSurface::base"][::std::mem::offset_of!(XenosSurface, base) - 48usize];
    ["Offset of field: XenosSurface::lock"][::std::mem::offset_of!(XenosSurface, lock) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XenosVertexBuffer {
    pub phys_base: u32_,
    pub vertices: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub space: ::std::os::raw::c_int,
    pub base: *mut ::std::os::raw::c_void,
    pub lock: XenosLock,
    pub next: *mut XenosVertexBuffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XenosVertexBuffer"][::std::mem::size_of::<XenosVertexBuffer>() - 56usize];
    ["Alignment of XenosVertexBuffer"][::std::mem::align_of::<XenosVertexBuffer>() - 8usize];
    ["Offset of field: XenosVertexBuffer::phys_base"]
        [::std::mem::offset_of!(XenosVertexBuffer, phys_base) - 0usize];
    ["Offset of field: XenosVertexBuffer::vertices"]
        [::std::mem::offset_of!(XenosVertexBuffer, vertices) - 4usize];
    ["Offset of field: XenosVertexBuffer::size"]
        [::std::mem::offset_of!(XenosVertexBuffer, size) - 8usize];
    ["Offset of field: XenosVertexBuffer::space"]
        [::std::mem::offset_of!(XenosVertexBuffer, space) - 12usize];
    ["Offset of field: XenosVertexBuffer::base"]
        [::std::mem::offset_of!(XenosVertexBuffer, base) - 16usize];
    ["Offset of field: XenosVertexBuffer::lock"]
        [::std::mem::offset_of!(XenosVertexBuffer, lock) - 24usize];
    ["Offset of field: XenosVertexBuffer::next"]
        [::std::mem::offset_of!(XenosVertexBuffer, next) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XenosIndexBuffer {
    pub phys_base: u32_,
    pub indices: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub base: *mut ::std::os::raw::c_void,
    pub fmt: ::std::os::raw::c_int,
    pub lock: XenosLock,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XenosIndexBuffer"][::std::mem::size_of::<XenosIndexBuffer>() - 56usize];
    ["Alignment of XenosIndexBuffer"][::std::mem::align_of::<XenosIndexBuffer>() - 8usize];
    ["Offset of field: XenosIndexBuffer::phys_base"]
        [::std::mem::offset_of!(XenosIndexBuffer, phys_base) - 0usize];
    ["Offset of field: XenosIndexBuffer::indices"]
        [::std::mem::offset_of!(XenosIndexBuffer, indices) - 4usize];
    ["Offset of field: XenosIndexBuffer::size"]
        [::std::mem::offset_of!(XenosIndexBuffer, size) - 8usize];
    ["Offset of field: XenosIndexBuffer::base"]
        [::std::mem::offset_of!(XenosIndexBuffer, base) - 16usize];
    ["Offset of field: XenosIndexBuffer::fmt"]
        [::std::mem::offset_of!(XenosIndexBuffer, fmt) - 24usize];
    ["Offset of field: XenosIndexBuffer::lock"]
        [::std::mem::offset_of!(XenosIndexBuffer, lock) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XenosDevice {
    pub alu_constants: [f32; 2048usize],
    pub fetch_constants: [u32_; 192usize],
    pub alu_dirty: u32_,
    pub fetch_dirty: u32_,
    pub clipplane: [f32; 24usize],
    pub integer_constants: [u32_; 40usize],
    pub controlpacket: [u32_; 9usize],
    pub stencildata: [u32_; 2usize],
    pub alpharef: ::std::os::raw::c_uint,
    pub vs: *mut XenosShader,
    pub ps: *mut XenosShader,
    pub vs_index: ::std::os::raw::c_int,
    pub dirty: ::std::os::raw::c_int,
    pub rb_secondary_base: u32_,
    pub rb: *mut ::std::os::raw::c_void,
    pub rb_primary: *mut ::std::os::raw::c_void,
    pub rb_secondary: *mut ::std::os::raw::c_void,
    pub rb_primary_wptr: ::std::os::raw::c_int,
    pub rb_secondary_wptr: ::std::os::raw::c_int,
    pub rb_secondary_boundary: ::std::os::raw::c_int,
    pub regs: *mut ::std::os::raw::c_uint,
    pub tex_fb: XenosSurface,
    pub default_fb: XenosSurface,
    pub rt: *mut XenosSurface,
    pub last_wptr: ::std::os::raw::c_int,
    pub vp_xres: ::std::os::raw::c_int,
    pub vp_yres: ::std::os::raw::c_int,
    pub frameidx: ::std::os::raw::c_int,
    pub clear_color: u32_,
    pub clear_stencil_z: u32_,
    pub msaa_samples: ::std::os::raw::c_int,
    pub vb_current: *mut XenosVertexBuffer,
    pub vb_head: *mut XenosVertexBuffer,
    pub vb_current_pitch: ::std::os::raw::c_int,
    pub vb_pool: *mut XenosVertexBuffer,
    pub vb_pool_after_frame: *mut XenosVertexBuffer,
    pub tris_drawn: ::std::os::raw::c_int,
    pub current_ib: *mut XenosIndexBuffer,
    pub current_vb: *mut XenosVertexBuffer,
    pub edram_colorformat: ::std::os::raw::c_int,
    pub edram_depthbase: ::std::os::raw::c_int,
    pub edram_color0base: ::std::os::raw::c_int,
    pub edram_hizpitch: ::std::os::raw::c_int,
    pub edram_pitch: ::std::os::raw::c_int,
    pub scissor_enable: ::std::os::raw::c_int,
    pub scissor_ltrb: [::std::os::raw::c_int; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XenosDevice"][::std::mem::size_of::<XenosDevice>() - 9656usize];
    ["Alignment of XenosDevice"][::std::mem::align_of::<XenosDevice>() - 8usize];
    ["Offset of field: XenosDevice::alu_constants"]
        [::std::mem::offset_of!(XenosDevice, alu_constants) - 0usize];
    ["Offset of field: XenosDevice::fetch_constants"]
        [::std::mem::offset_of!(XenosDevice, fetch_constants) - 8192usize];
    ["Offset of field: XenosDevice::alu_dirty"]
        [::std::mem::offset_of!(XenosDevice, alu_dirty) - 8960usize];
    ["Offset of field: XenosDevice::fetch_dirty"]
        [::std::mem::offset_of!(XenosDevice, fetch_dirty) - 8964usize];
    ["Offset of field: XenosDevice::clipplane"]
        [::std::mem::offset_of!(XenosDevice, clipplane) - 8968usize];
    ["Offset of field: XenosDevice::integer_constants"]
        [::std::mem::offset_of!(XenosDevice, integer_constants) - 9064usize];
    ["Offset of field: XenosDevice::controlpacket"]
        [::std::mem::offset_of!(XenosDevice, controlpacket) - 9224usize];
    ["Offset of field: XenosDevice::stencildata"]
        [::std::mem::offset_of!(XenosDevice, stencildata) - 9260usize];
    ["Offset of field: XenosDevice::alpharef"]
        [::std::mem::offset_of!(XenosDevice, alpharef) - 9268usize];
    ["Offset of field: XenosDevice::vs"][::std::mem::offset_of!(XenosDevice, vs) - 9272usize];
    ["Offset of field: XenosDevice::ps"][::std::mem::offset_of!(XenosDevice, ps) - 9280usize];
    ["Offset of field: XenosDevice::vs_index"]
        [::std::mem::offset_of!(XenosDevice, vs_index) - 9288usize];
    ["Offset of field: XenosDevice::dirty"][::std::mem::offset_of!(XenosDevice, dirty) - 9292usize];
    ["Offset of field: XenosDevice::rb_secondary_base"]
        [::std::mem::offset_of!(XenosDevice, rb_secondary_base) - 9296usize];
    ["Offset of field: XenosDevice::rb"][::std::mem::offset_of!(XenosDevice, rb) - 9304usize];
    ["Offset of field: XenosDevice::rb_primary"]
        [::std::mem::offset_of!(XenosDevice, rb_primary) - 9312usize];
    ["Offset of field: XenosDevice::rb_secondary"]
        [::std::mem::offset_of!(XenosDevice, rb_secondary) - 9320usize];
    ["Offset of field: XenosDevice::rb_primary_wptr"]
        [::std::mem::offset_of!(XenosDevice, rb_primary_wptr) - 9328usize];
    ["Offset of field: XenosDevice::rb_secondary_wptr"]
        [::std::mem::offset_of!(XenosDevice, rb_secondary_wptr) - 9332usize];
    ["Offset of field: XenosDevice::rb_secondary_boundary"]
        [::std::mem::offset_of!(XenosDevice, rb_secondary_boundary) - 9336usize];
    ["Offset of field: XenosDevice::regs"][::std::mem::offset_of!(XenosDevice, regs) - 9344usize];
    ["Offset of field: XenosDevice::tex_fb"]
        [::std::mem::offset_of!(XenosDevice, tex_fb) - 9352usize];
    ["Offset of field: XenosDevice::default_fb"]
        [::std::mem::offset_of!(XenosDevice, default_fb) - 9432usize];
    ["Offset of field: XenosDevice::rt"][::std::mem::offset_of!(XenosDevice, rt) - 9512usize];
    ["Offset of field: XenosDevice::last_wptr"]
        [::std::mem::offset_of!(XenosDevice, last_wptr) - 9520usize];
    ["Offset of field: XenosDevice::vp_xres"]
        [::std::mem::offset_of!(XenosDevice, vp_xres) - 9524usize];
    ["Offset of field: XenosDevice::vp_yres"]
        [::std::mem::offset_of!(XenosDevice, vp_yres) - 9528usize];
    ["Offset of field: XenosDevice::frameidx"]
        [::std::mem::offset_of!(XenosDevice, frameidx) - 9532usize];
    ["Offset of field: XenosDevice::clear_color"]
        [::std::mem::offset_of!(XenosDevice, clear_color) - 9536usize];
    ["Offset of field: XenosDevice::clear_stencil_z"]
        [::std::mem::offset_of!(XenosDevice, clear_stencil_z) - 9540usize];
    ["Offset of field: XenosDevice::msaa_samples"]
        [::std::mem::offset_of!(XenosDevice, msaa_samples) - 9544usize];
    ["Offset of field: XenosDevice::vb_current"]
        [::std::mem::offset_of!(XenosDevice, vb_current) - 9552usize];
    ["Offset of field: XenosDevice::vb_head"]
        [::std::mem::offset_of!(XenosDevice, vb_head) - 9560usize];
    ["Offset of field: XenosDevice::vb_current_pitch"]
        [::std::mem::offset_of!(XenosDevice, vb_current_pitch) - 9568usize];
    ["Offset of field: XenosDevice::vb_pool"]
        [::std::mem::offset_of!(XenosDevice, vb_pool) - 9576usize];
    ["Offset of field: XenosDevice::vb_pool_after_frame"]
        [::std::mem::offset_of!(XenosDevice, vb_pool_after_frame) - 9584usize];
    ["Offset of field: XenosDevice::tris_drawn"]
        [::std::mem::offset_of!(XenosDevice, tris_drawn) - 9592usize];
    ["Offset of field: XenosDevice::current_ib"]
        [::std::mem::offset_of!(XenosDevice, current_ib) - 9600usize];
    ["Offset of field: XenosDevice::current_vb"]
        [::std::mem::offset_of!(XenosDevice, current_vb) - 9608usize];
    ["Offset of field: XenosDevice::edram_colorformat"]
        [::std::mem::offset_of!(XenosDevice, edram_colorformat) - 9616usize];
    ["Offset of field: XenosDevice::edram_depthbase"]
        [::std::mem::offset_of!(XenosDevice, edram_depthbase) - 9620usize];
    ["Offset of field: XenosDevice::edram_color0base"]
        [::std::mem::offset_of!(XenosDevice, edram_color0base) - 9624usize];
    ["Offset of field: XenosDevice::edram_hizpitch"]
        [::std::mem::offset_of!(XenosDevice, edram_hizpitch) - 9628usize];
    ["Offset of field: XenosDevice::edram_pitch"]
        [::std::mem::offset_of!(XenosDevice, edram_pitch) - 9632usize];
    ["Offset of field: XenosDevice::scissor_enable"]
        [::std::mem::offset_of!(XenosDevice, scissor_enable) - 9636usize];
    ["Offset of field: XenosDevice::scissor_ltrb"]
        [::std::mem::offset_of!(XenosDevice, scissor_ltrb) - 9640usize];
};
unsafe extern "C" {
    pub fn Xe_Init(xe: *mut XenosDevice);
}
unsafe extern "C" {
    pub fn Xe_Fatal(xe: *mut XenosDevice, fmt: *const ::std::os::raw::c_char, ...) -> !;
}
unsafe extern "C" {
    pub fn Xe_SetRenderTarget(xe: *mut XenosDevice, rt: *mut XenosSurface);
}
unsafe extern "C" {
    pub fn Xe_Resolve(xe: *mut XenosDevice);
}
unsafe extern "C" {
    pub fn Xe_ResolveInto(
        xe: *mut XenosDevice,
        surface: *mut XenosSurface,
        source: ::std::os::raw::c_int,
        clear: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xe_Clear(xe: *mut XenosDevice, flags: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn Xe_GetFramebufferSurface(xe: *mut XenosDevice) -> *mut XenosSurface;
}
unsafe extern "C" {
    pub fn Xe_SetFrameBufferSurface(xe: *mut XenosDevice, fb: *mut XenosSurface);
}
unsafe extern "C" {
    pub fn Xe_Execute(xe: *mut XenosDevice);
}
unsafe extern "C" {
    pub fn Xe_Sync(xe: *mut XenosDevice);
}
unsafe extern "C" {
    pub fn Xe_SetClearColor(xe: *mut XenosDevice, clearcolor: u32_);
}
unsafe extern "C" {
    pub fn Xe_DirtyAluConstant(
        xe: *mut XenosDevice,
        base: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xe_DirtyFetch(
        xe: *mut XenosDevice,
        base: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xe_LoadShader(
        xe: *mut XenosDevice,
        filename: *const ::std::os::raw::c_char,
    ) -> *mut XenosShader;
}
unsafe extern "C" {
    pub fn Xe_LoadShaderFromMemory(
        xe: *mut XenosDevice,
        shader: *mut ::std::os::raw::c_void,
    ) -> *mut XenosShader;
}
unsafe extern "C" {
    pub fn Xe_InstantiateShader(
        xe: *mut XenosDevice,
        sh: *mut XenosShader,
        index: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    pub fn Xe_GetShaderLength(
        xe: *mut XenosDevice,
        sh: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Xe_ShaderApplyVFetchPatches(
        xe: *mut XenosDevice,
        sh: *mut XenosShader,
        index: ::std::os::raw::c_uint,
        fmt: *const XenosVBFFormat,
    );
}
unsafe extern "C" {
    pub fn Xe_VBFCalcStride(
        xe: *mut XenosDevice,
        fmt: *const XenosVBFFormat,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Xe_VBFCalcSize(
        xe: *mut XenosDevice,
        fmt: *const XenosVBFElement,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Xe_SetZFunc(xe: *mut XenosDevice, z_func: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn Xe_SetZWrite(xe: *mut XenosDevice, zw: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn Xe_SetZEnable(xe: *mut XenosDevice, zw: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn Xe_SetFillMode(
        xe: *mut XenosDevice,
        front: ::std::os::raw::c_int,
        back: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xe_SetBlendControl(
        xe: *mut XenosDevice,
        col_src: ::std::os::raw::c_int,
        col_op: ::std::os::raw::c_int,
        col_dst: ::std::os::raw::c_int,
        alpha_src: ::std::os::raw::c_int,
        alpha_op: ::std::os::raw::c_int,
        alpha_dst: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xe_SetSrcBlend(xe: *mut XenosDevice, blend: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn Xe_SetDestBlend(xe: *mut XenosDevice, blend: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn Xe_SetBlendOp(xe: *mut XenosDevice, blendop: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn Xe_SetSrcBlendAlpha(xe: *mut XenosDevice, blend: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn Xe_SetDestBlendAlpha(xe: *mut XenosDevice, blend: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn Xe_SetBlendOpAlpha(xe: *mut XenosDevice, blendop: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn Xe_SetCullMode(xe: *mut XenosDevice, cullmode: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn Xe_SetAlphaTestEnable(xe: *mut XenosDevice, enable: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn Xe_SetAlphaFunc(xe: *mut XenosDevice, func: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn Xe_SetAlphaRef(xe: *mut XenosDevice, alpharef: f32);
}
unsafe extern "C" {
    pub fn Xe_SetScissor(
        xe: *mut XenosDevice,
        enable: ::std::os::raw::c_int,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xe_SetStencilEnable(xe: *mut XenosDevice, enable: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn Xe_SetStencilFunc(
        xe: *mut XenosDevice,
        bfff: ::std::os::raw::c_int,
        func: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    pub fn Xe_SetStencilOp(
        xe: *mut XenosDevice,
        bfff: ::std::os::raw::c_int,
        fail: ::std::os::raw::c_int,
        zfail: ::std::os::raw::c_int,
        pass: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xe_SetStencilRef(
        xe: *mut XenosDevice,
        bfff: ::std::os::raw::c_int,
        ref_: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xe_SetStencilMask(
        xe: *mut XenosDevice,
        bfff: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xe_SetStencilWriteMask(
        xe: *mut XenosDevice,
        bfff: ::std::os::raw::c_int,
        writemask: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xe_SetClipPlaneEnables(xe: *mut XenosDevice, enables: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn Xe_SetClipPlane(xe: *mut XenosDevice, idx: ::std::os::raw::c_int, plane: *mut f32);
}
unsafe extern "C" {
    pub fn Xe_InvalidateState(xe: *mut XenosDevice);
}
unsafe extern "C" {
    pub fn Xe_SetShader(
        xe: *mut XenosDevice,
        type_: ::std::os::raw::c_int,
        sh: *mut XenosShader,
        instance: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xe_SetTexture(
        xe: *mut XenosDevice,
        index: ::std::os::raw::c_int,
        tex: *mut XenosSurface,
    );
}
unsafe extern "C" {
    pub fn Xe_VBPoolAlloc(
        xe: *mut XenosDevice,
        size: ::std::os::raw::c_int,
    ) -> *mut XenosVertexBuffer;
}
unsafe extern "C" {
    pub fn Xe_VBPoolAdd(xe: *mut XenosDevice, vb: *mut XenosVertexBuffer);
}
unsafe extern "C" {
    pub fn Xe_VBReclaim(xe: *mut XenosDevice);
}
unsafe extern "C" {
    pub fn Xe_VBBegin(xe: *mut XenosDevice, pitch: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn Xe_VBPut(
        xe: *mut XenosDevice,
        data: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xe_VBEnd(xe: *mut XenosDevice) -> *mut XenosVertexBuffer;
}
unsafe extern "C" {
    pub fn Xe_Draw(xe: *mut XenosDevice, vb: *mut XenosVertexBuffer, ib: *mut XenosIndexBuffer);
}
unsafe extern "C" {
    pub fn Xe_SetIndices(de: *mut XenosDevice, ib: *mut XenosIndexBuffer);
}
unsafe extern "C" {
    pub fn Xe_DrawIndexedPrimitive(
        xe: *mut XenosDevice,
        type_: ::std::os::raw::c_int,
        base_index: ::std::os::raw::c_int,
        min_index: ::std::os::raw::c_int,
        num_vertices: ::std::os::raw::c_int,
        start_index: ::std::os::raw::c_int,
        primitive_count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xe_DrawPrimitive(
        xe: *mut XenosDevice,
        type_: ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        primitive_count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xe_SetStreamSource(
        xe: *mut XenosDevice,
        index: ::std::os::raw::c_int,
        vb: *mut XenosVertexBuffer,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xe_CreateIndexBuffer(
        xe: *mut XenosDevice,
        length: ::std::os::raw::c_int,
        format: ::std::os::raw::c_int,
    ) -> *mut XenosIndexBuffer;
}
unsafe extern "C" {
    pub fn Xe_DestroyIndexBuffer(xe: *mut XenosDevice, ib: *mut XenosIndexBuffer);
}
unsafe extern "C" {
    pub fn Xe_CreateVertexBuffer(
        xe: *mut XenosDevice,
        length: ::std::os::raw::c_int,
    ) -> *mut XenosVertexBuffer;
}
unsafe extern "C" {
    pub fn Xe_DestroyVertexBuffer(xe: *mut XenosDevice, vb: *mut XenosVertexBuffer);
}
unsafe extern "C" {
    pub fn Xe_VB_Lock(
        xe: *mut XenosDevice,
        vb: *mut XenosVertexBuffer,
        offset: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn Xe_VB_Unlock(xe: *mut XenosDevice, vb: *mut XenosVertexBuffer);
}
unsafe extern "C" {
    pub fn Xe_IB_Lock(
        xe: *mut XenosDevice,
        ib: *mut XenosIndexBuffer,
        offset: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn Xe_IB_Unlock(xe: *mut XenosDevice, ib: *mut XenosIndexBuffer);
}
unsafe extern "C" {
    pub fn Xe_SetVertexShaderConstantF(
        xe: *mut XenosDevice,
        start: ::std::os::raw::c_int,
        data: *const f32,
        count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xe_SetPixelShaderConstantF(
        xe: *mut XenosDevice,
        start: ::std::os::raw::c_int,
        data: *const f32,
        count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xe_SetVertexShaderConstantB(
        xe: *mut XenosDevice,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xe_SetPixelShaderConstantB(
        xe: *mut XenosDevice,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xe_CreateTexture(
        xe: *mut XenosDevice,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        levels: ::std::os::raw::c_uint,
        format: ::std::os::raw::c_int,
        tiled: ::std::os::raw::c_int,
    ) -> *mut XenosSurface;
}
unsafe extern "C" {
    pub fn Xe_DestroyTexture(xe: *mut XenosDevice, surface: *mut XenosSurface);
}
unsafe extern "C" {
    pub fn Xe_Surface_LockRect(
        xe: *mut XenosDevice,
        surface: *mut XenosSurface,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn Xe_Surface_Unlock(xe: *mut XenosDevice, surface: *mut XenosSurface);
}
unsafe extern "C" {
    pub fn Xe_IsVBlank(xe: *mut XenosDevice) -> ::std::os::raw::c_int;
}
